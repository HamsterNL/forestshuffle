const __vite__fileDeps=["assets/DefineForestView-BtiIoKrp.js","assets/@fortawesome-6O_dDzom.js","assets/@vue-nVQ0RcsF.js","assets/bootstrap-De39DNDK.js","assets/@popperjs-WhmJkuoZ.js","assets/bootstrap-DUEfxN0n.css","assets/pinia-Cj4Lcor1.js","assets/vue-i18n-2F-3GSBZ.js","assets/@intlify-Y34EtYYP.js","assets/vue-router-AXQ5_F_T.js","assets/vue-toastification-BHb1mGnt.js","assets/vue-gtag-C-InrC_z.js","assets/register-service-worker-TYP_X6yW.js","assets/DefineForestView-DkS420gs.css","assets/ImprintView-DIKFa_Qm.js","assets/ImprintView-D08j89TI.css"],__vite__mapDeps=i=>i.map(i=>__vite__fileDeps[i]);
import"./bootstrap-De39DNDK.js";import{V as B,C as p,D as y,N as i,O as b,P as l,X as S,Y as A,M as D,L as T,y as m,K as C,z as $,H as I,F as _,b as G,Z as R,_ as x,W as q}from"./@vue-nVQ0RcsF.js";import{d as L,c as W}from"./pinia-Cj4Lcor1.js";import{c as V}from"./vue-i18n-2F-3GSBZ.js";import{R as J,c as K,a as U}from"./vue-router-AXQ5_F_T.js";import{u as j}from"./vue-toastification-BHb1mGnt.js";import{b as Z,i as Q}from"./vue-gtag-C-InrC_z.js";import{F as E,l as d,f as X,a as Y,b as ee,c as te,d as oe,e as se}from"./@fortawesome-6O_dDzom.js";import{r as ne}from"./register-service-worker-TYP_X6yW.js";import"./@popperjs-WhmJkuoZ.js";import"./@intlify-Y34EtYYP.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const r of n)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function o(n){const r={};return n.integrity&&(r.integrity=n.integrity),n.referrerPolicy&&(r.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?r.credentials="include":n.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(n){if(n.ep)return;n.ep=!0;const r=o(n);fetch(n.href,r)}})();const re={en:{cookies:{intro:'This site uses Cookies - for more information on this check our data privacy policy. Click on "Accept all", to accept all cookies or fine tune your cookie settings by clicking here',settings:"Cookie settings",acceptAll:"Accept all",acceptSelection:"Accept selection",technical:"Store relevant data to run this site",tracking:"Store data for anonymous analytics of user interactions with this website",social:"Store data for social media integrations on this website",consentRequired:"Please consent to cookies first"},forrestShuffle:"Forest Shuffle",scoringApp:"Scoring App",letsGo:"Let's go",imprint:"Imprint",dataProtection:"Data Security",points:"Points",player:"Player",treeTypeCount:"Amounts of tree types",startNewGame:"Start new game",resetPlayers:"Reset players",alpineExpansion:"Alpine Expansion","error.nameTaken":"The name {0} is already taken.",trees:"Trees",tops:"Tops",bottoms:"Bottoms",sides:"Sides",birds:"Birds",butterflies:"Butterflies",others:"Others",plants:"Plants",mushrooms:"Mushrooms",amphibians:"Amphibians",insects:"Insects",pawedAnimals:"Pawed Animals",bats:"Bats",deer:"Deer",clovenHoofedAnimal:"Cloven-Hoofed Animal",deerAndCloven:"Deer and cloven-Hoofed Animals",alps:"Alps",silverFirCount:"Silver Fir symbols",lindenCount:"Linden symbols",horseChestnutCount:"Horse Chestnut symbols",birchCount:"Birch symbols",beechCount:"Beech symbols",sycamoreCount:"Sycamore symbols",douglasFirCount:"Douglas Fir symbols",oakCount:"Oak symbols",europeanLarchCount:"European Larch symbols",stonePineCount:"Stone Pine symbols",beech:"Beech",birch:"Birch",douglasFir:"Douglas Fir",horseChestnut:"Horse Chestnut",linden:"Linden",oak:"Oak",silverFir:"Silver Fir",cardsAttachedToSilverFirs:"cards attached",sycamore:"Sycamore",treeSaplings:"Tree Saplings",bullfinch:"Bullfinch",chaffinch:"Chaffinch",chaffinchesAtopABeech:"atop a beech",eurasianJay:"Eurasian Jay",goshawk:"Goshawk",greatSpottedWoodpecker:"Great Spotted Woodpecker",tawnyOwl:"Tawny Owl",camberwellBeauty:"Camberwell Beauty",peacockButterfly:"Peacock Butterfly",silverWashedFritillary:"Silver-Washed Fritillary",purpleEmperor:"Purple Emperor",largeTortoiseshell:"Large Tortoiseshell",redSquirrel:"Red Squirrel",redSquirrelsAtopAnOak:"atop an oak",blackberries:"Blackberries",chanterelle:"Chanterelle",flyagaric:"Fly Agaric",moss:"Moss",parasolMushroom:"Parasol Mushroom",pennyBun:"Penny Bun",treeFerns:"Tree Ferns",wildStrawberries:"Wild Strawberries",commonToad:"Common Toad",sharingACardSlot:"sharing a card slot",pondTurtle:"Pond Turtle",treeFrog:"Tree Frog",fireSalamander:"Fire Salamander",fireflies:"Fireflies",woodAnt:"Wood Ant",hedgehog:"Hedgehog",mole:"Mole",stagBeetle:"Stag Beetle",violetCarpenterBee:"Violet Carpenter Bee",onABeech:"on a beech",onAHorseChestnut:"on a horse chestnut",onALinden:"on a linden",gnat:"Gnat",barbastelleBat:"Barbastelle Bat",bechsteinsBat:"Bechstein's Bat",brownLongEaredBat:"Brown Long-Eared Bat",greaterHorseshoeBat:"Greater Horseshoe Bat",fallowDeer:"Fallow Deer",redDeer:"Red Deer",roeDeerBeech:"Roe Deer",roeDeerBirch:"Roe Deer",roeDeerHorseChestnut:"Roe Deer",roeDeerLinden:"Roe Deer",roeDeerSilverFir:"Roe Deer",squeaker:"Squeaker",wildBoar:"Wild Boar",beechMarten:"Beech Marten",fullyOccupiedTrees:"fully occupied trees",brownBear:"Brown Bear",europeanBadger:"European Badger",europeanFatDormouse:"European Fat Dormouse",batOnTheOtherSide:"with bat on the opposite",europeanHare:"European Hare",lynx:"Lynx",raccoon:"Raccoon",redFox:"Red Fox",wolf:"Wolf",cave:"Cave",cardsInCave:"Cards in cave",europeanLarch:"European Larch",stonePine:"Stone Pine",alpineMarmot:"Alpine Marmot",chamois:"Chamois",capercaillie:"Capercaillie",mountainHare:"Mountain Hare",steinbock:"Steinbock",savisPipistrelle:"Savi's Pipistrelle",phoebusApollo:"Phoebus Apollo",blackTrumpet:"Black Trumpet",edelweiss:"Edelweiss",blueberry:"Blueberry",alpineNewt:"Alpine Newt",goldenEagle:"Golden Eagle",beardedVulture:"Bearded Vulture",gentian:"Gentian",commonRaven:"Common Raven"},de:{cookies:{intro:'Diese Website verwendet Cookies - nähere Information dazu und zu Deinen Rechten als Benutzer findest Du in unserer Datenschutzerklärung. Klicke auf "Alle annehmen", um Cookies zu akzeptieren und direkt unsere Website benutzen zu können, oder verwalte Deine Cookies indem Du hier klickst',settings:"Cookie Einstellungen",acceptAll:"Alle annehmen",acceptSelection:"Auswahl bestätigen",technical:"Für Speicherung von für die   Funktion der Website essentiellen Daten",tracking:"Für die anonymisierte Analyse des Nutzerverhalten notwendige Daten speichern",social:"Social Media auf der Website ermöglichen",consentRequired:"Please consent to cookies first"},forrestShuffle:"Mischwald",scoringApp:"Wertungs-App",imprint:"Impressum",dataProtection:"Datenschutz",letsGo:"Los geht's",points:"Punkte",player:"Spieler",treeTypeCount:"Anzahl Baumtypen-Symbole",startNewGame:"Neues Spiel starten",resetPlayers:"Spieler zurücksetzen",alpineExpansion:"Alpin Erweiterung","error.nameTaken":"Der Name {0} ist bereits vergeben.",trees:"Bäume",tops:"Oben",bottoms:"Unten",sides:"Seiten",birds:"Vögel",butterflies:"Schmetterlinge",others:"Weitere",plants:"Pflanzen",mushrooms:"Pilze",amphibians:"Amphibien",insects:"Insekten",pawedAnimals:"Pfotentiere",bats:"Fledermäuse",deer:"Hirsch",clovenHoofedAnimal:"Paarhufer",alps:"Alpen",silverFirCount:"Tannen-Symbole",lindenCount:"Linden-Symbole",horseChestnutCount:"Kastanien-Symbole",birchCount:"Birken-Symbole",beechCount:"Buchen-Symbole",sycamoreCount:"Ahorn-Symbole",douglasFirCount:"Douglasien-Symbole",oakCount:"Eichen-Symbole",europeanLarchCount:"Europäische Lärchen-Symbole",stonePineCount:"Zirbelkiefer-Symbole",beech:"Buche",birch:"Birke",douglasFir:"Douglasie",horseChestnut:"Kastanie",linden:"Linde",oak:"Eiche",silverFir:"Tanne",cardsAttachedToSilverFirs:"Karten, die an Tannen liegen",sycamore:"Ahorn",treeSaplings:"Sprössling",bullfinch:"Gimpel",chaffinch:"Buchfink",chaffinchesAtopABeech:"auf einer Buche",eurasianJay:"Eichelhäher,",goshawk:"Habicht",greatSpottedWoodpecker:"Buntspecht",tawnyOwl:"Waldkauz",camberwellBeauty:"Trauermantel",peacockButterfly:"Tagpfauenauge",silverWashedFritillary:"Kaisermantel",purpleEmperor:"Schillerfalter",largeTortoiseshell:"Großer Fuchs",redSquirrel:"Eichhörnchen",redSquirrelsAtopAnOak:"auf einer Eiche",blackberries:"Brombeeren",chanterelle:"Pfifferling",flyagaric:"Fliegenpilz",moss:"Moos",parasolMushroom:"Parasol",pennyBun:"Steinpilz",treeFerns:"Baumfarn",wildStrawberries:"Walderdbeeren",commonToad:"Erdkröte",sharingACardSlot:"teilen sich den Platz",pondTurtle:"Sumpfschildkröte",treeFrog:"Laubfrosch",fireSalamander:"Feuersalamander",fireflies:"Glühwürmchen",woodAnt:"Waldameise",hedgehog:"Igel",mole:"Maulwurf",stagBeetle:"Hirschkäfer",violetCarpenterBee:"Holzbiene",onABeech:"auf einer Buche",onAHorseChestnut:"auf einer Kastanie",onALinden:"auf einer Linde",gnat:"Stechmücke",barbastelleBat:"Mops-Fledermaus",bechsteinsBat:"Bechstein-Fledermaus",brownLongEaredBat:"Braunes Langohr",greaterHorseshoeBat:"Hufeisennase",fallowDeer:"Damhirsch",redDeer:"Rothirsch",roeDeerBeech:"Reh",roeDeerBirch:"Reh",roeDeerHorseChestnut:"Reh",roeDeerLinden:"Reh",roeDeerSilverFir:"Reh",squeaker:"Frischling",deerAndCloven:"Rotwild und Huftiere",wildBoar:"Wildschwein",beechMarten:"Steinmarder",fullyOccupiedTrees:"voll besetzte Bäume",brownBear:"Braunbär",europeanBadger:"Dachs",europeanFatDormouse:"Siebenschläfer",batOnTheOtherSide:"mit Fledermaus gegenüber",europeanHare:"Feldhase",lynx:"Luchs",raccoon:"Waschbär",redFox:"Fuchs",wolf:"Wolf",cave:"Höhle",cardsInCave:"Karten in der Höhle",europeanLarch:"Europäische Lärche",stonePine:"Zirbelkiefer",alpineMarmot:"Alpenmurmeltier",chamois:"Gämse",capercaillie:"Auerhuhn",mountainHare:"Berghase",steinbock:"Steinbock",savisPipistrelle:"Alpenfledermaus",phoebusApollo:"Alpen-Apollofalter",blackTrumpet:"Herbsttrompete",edelweiss:"Edelweiß",blueberry:"Heidelbeere",alpineNewt:"Bergmolch",goldenEagle:"Steinadler",beardedVulture:"Bartgeier",gentian:"Enzian",commonRaven:"Kolkrabe"},fr:{cookies:{intro:`Ce site utilise des cookies - pour plus d'informations, consultez notre politique de confidentialité des données. Cliquez sur "Accepter tout", pour accepter tous les cookies ou ajustez vos paramètres de cookies en cliquant ici`,settings:"Paramètres des cookies",acceptAll:"Tout accepter",acceptSelection:"Accepter la sélection",technical:"Stocker les données pertinentes pour faire fonctionner ce site",tracking:"Stocker les données pour l'analyse anonyme des interactions des utilisateurs avec ce site",social:"Stocker les données pour les intégrations de médias sociaux sur ce site",consentRequired:"Veuillez d'abord consentir aux cookies"},forrestShuffle:"Forêt Mixte",scoringApp:"Application de Score",letsGo:"Allons-y",imprint:"Empreinte",dataProtection:"Sécurité des Données",points:"Points",player:"Joueur",treeTypeCount:"Nombre de types d'arbres",startNewGame:"Commencer une nouvelle partie",resetPlayers:"Réinitialiser les joueurs",alpineExpansion:"Extension Alps","error.nameTaken":"Le nom {0} est déjà pris.",trees:"Arbres",tops:"Hauts",bottoms:"Bas",sides:"Côtés",birds:"Oiseaux",butterflies:"Papillons",others:"Autres",plants:"Plantes",mushrooms:"Champignons",amphibians:"Amphibiens",insects:"Insectes",pawedAnimals:"Plantigrades / digitigrades",bats:"Chauves-souris",deer:"Cerfs",clovenHoofedAnimal:"Animal à sabots fendus",deerAndCloven:"Cerfs et animaux à sabots fendus",alps:"Alpien",silverFirCount:"Symboles de sapin argenté",lindenCount:"Symboles de tilleul",horseChestnutCount:"Symboles de marronnier",birchCount:"Symboles de bouleau",beechCount:"Symboles de hêtre",sycamoreCount:"Symboles de sycomore",douglasFirCount:"Symboles de sapin de Douglas",oakCount:"Symboles de chêne",europeanLarchCount:"Symboles de mélèze européen",stonePineCount:"Symboles de pin cembro",beech:"Hêtre",birch:"Bouleau",douglasFir:"Sapin de Douglas",horseChestnut:"Marronnier d'Inde",linden:"Tilleul",oak:"Chêne",silverFir:"Sapin argenté",cardsAttachedToSilverFirs:"cartes attachées",sycamore:"Sycomore",treeSaplings:"Jeunes pousses d'arbres",bullfinch:"Bouvreuil",chaffinch:"Pinson des arbres",chaffinchesAtopABeech:"au sommet d'un hêtre",eurasianJay:"Geai des chênes",goshawk:"Autour des palombes",greatSpottedWoodpecker:"Pic épeiche",tawnyOwl:"Chouette hulotte",camberwellBeauty:"Grand Admiral",peacockButterfly:"Paon du jour",silverWashedFritillary:"Tabac d'Espagne",purpleEmperor:"Grand Mars changeant",largeTortoiseshell:"Grande Tortue",redSquirrel:"Écureuil roux",redSquirrelsAtopAnOak:"au sommet d'un chêne",blackberries:"Mûres",chanterelle:"Girolle",flyagaric:"Amanite tue-mouches",moss:"Mousse",parasolMushroom:"Coulemelle",pennyBun:"Cèpe de Bordeaux",treeFerns:"Fougères arborescentes",wildStrawberries:"Fraises des bois",commonToad:"Crapaud commun",sharingACardSlot:"partageant un emplacement de carte",pondTurtle:"Cistude d'Europe",treeFrog:"Rainette",fireSalamander:"Salamandre tachetée",fireflies:"Luciole",woodAnt:"Fourmi rousse",hedgehog:"Hérisson",mole:"Taupe",stagBeetle:"Lucane cerf-volant",violetCarpenterBee:"Abeille charpentière violette",onABeech:"sur un hêtre",onAHorseChestnut:"sur un marronnier d'Inde",onALinden:"sur un tilleul",gnat:"Moucheron",barbastelleBat:"Barbastelle",bechsteinsBat:"Chauve-souris de Bechstein",brownLongEaredBat:"Oreillard brun",greaterHorseshoeBat:"Grand rhinolophe",fallowDeer:"Daim",redDeer:"Cerf élaphe",roeDeerBeech:"Chevreuil",roeDeerBirch:"Chevreuil",roeDeerHorseChestnut:"Chevreuil",roeDeerLinden:"Chevreuil",roeDeerSilverFir:"Chevreuil",squeaker:"Crécelle",wildBoar:"Sanglier",beechMarten:"Fouine",fullyOccupiedTrees:"arbres entièrement occupés",brownBear:"Ours brun",europeanBadger:"Blaireau européen",europeanFatDormouse:"Loir",batOnTheOtherSide:"avec une chauve-souris de l'autre côté",europeanHare:"Lièvre européen",lynx:"Lynx",raccoon:"Raton laveur",redFox:"Renard roux",wolf:"Loup",cave:"Grotte",cardsInCave:"Cartes dans la grotte",europeanLarch:"Mélèze européen",stonePine:"Pin cembro",alpineMarmot:"Marmotte des Alpes",chamois:"Chamois",capercaillie:"Grand tétras",mountainHare:"Lièvre variable",steinbock:"Bouquetin",savisPipistrelle:"Pipistrelle de Savi",phoebusApollo:"Apollon",blackTrumpet:"Trompette de la mort",edelweiss:"Edelweiss",blueberry:"Myrtille",alpineNewt:"Triton alpestre",goldenEagle:"Aigle royal",beardedVulture:"Gypaète barbu",gentian:"Gentiane",commonRaven:"Grand corbeau"},it:{cookies:{intro:'Questo sito web utilizza i cookie - maggiori informazioni su questo e sui tuoi diritti come utente sono disponibili nella nostra Informativa sulla privacy. Fai clic su "Accetta tutto" per accettare i cookie e utilizzare direttamente il nostro sito web, oppure gestisci i tuoi cookie facendo clic qui',settings:"Impostazioni dei cookie",acceptAll:"Accetta tutto",acceptSelection:"Conferma selezione",technical:"Per la memorizzazione dei dati essenziali per il funzionamento del sito web",tracking:"Per memorizzare i dati necessari per l'analisi anonima del comportamento degli utenti",social:"Consentire i social media sul sito web",consentRequired:"Per favore, acconsenti prima ai cookie"},forrestShuffle:"Foresta mista",scoringApp:"App di punteggio",imprint:"Impressum",dataProtection:"Protezione dei dati",letsGo:"Andiamo",points:"Punti",player:"Giocatore",treeTypeCount:"Numero di simboli dei tipi di alberi",startNewGame:"Inizia un nuovo gioco",resetPlayers:"Reimposta giocatori",alpineExpansion:"Espansione alpina","error.nameTaken":"Il nome {0} è già stato preso.",trees:"Alberi",tops:"In alto",bottoms:"In basso",sides:"Ai lati",birds:"Uccelli",butterflies:"Farfalle",others:"Altri",plants:"Piante",mushrooms:"Funghi",amphibians:"Anfibi",insects:"Insetti",pawedAnimals:"Animali con zampa",bats:"Pipistrelli",deer:"Cervo",clovenHoofedAnimal:"Animale con zoccoli divisi",alps:"Alpi",silverFirCount:"Simboli dell'abete bianco",lindenCount:"Simboli del tiglio",horseChestnutCount:"Simboli dell'ippocastano",birchCount:"Simboli della betulla",beechCount:"Simboli del faggio",sycamoreCount:"Simboli dell'acero",douglasFirCount:"Simboli dell'abete di Douglas",oakCount:"Simboli della quercia",europeanLarchCount:"Simboli del larice europeo",stonePineCount:"Simboli del pino cembro",beech:"Faggio",birch:"Betulla",douglasFir:"Abete di Douglas",horseChestnut:"Ippocastano",linden:"Tiglio",oak:"Quercia",silverFir:"Abete bianco",cardsAttachedToSilverFirs:"Carte attaccate agli abeti bianchi",sycamore:"Acero",treeSaplings:"Germoglio",bullfinch:"Ciuffolotto",chaffinch:"Fringuello",chaffinchesAtopABeech:"su un faggio",eurasianJay:"Ghiandaia",goshawk:"Astore",greatSpottedWoodpecker:"Picchio rosso maggiore",tawnyOwl:"Allocco",camberwellBeauty:"Atalanta",peacockButterfly:"Occhio di pavone",silverWashedFritillary:"Argynnis paphia",purpleEmperor:"Apatura iris",largeTortoiseshell:"Nymphalis polychloros",redSquirrel:"Scoiattolo rosso",redSquirrelsAtopAnOak:"su una quercia",blackberries:"More",chanterelle:"Galletto",flyagaric:"Amanita muscaria",moss:"Muschio",parasolMushroom:"Mazze di tamburo",pennyBun:"Porcino",treeFerns:"Felci arboree",wildStrawberries:"Fragole selvatiche",commonToad:"Rospo comune",sharingACardSlot:"condividono lo slot",pondTurtle:"Testuggine palustre",treeFrog:"Raganella",fireSalamander:"Salamandra pezzata",fireflies:"Lucciole",woodAnt:"Formica rufa",hedgehog:"Riccio",mole:"Talpa",stagBeetle:"Cervo volante",violetCarpenterBee:"Ape legnaiola",onABeech:"su un faggio",onAHorseChestnut:"su un ippocastano",onALinden:"su un tiglio",gnat:"Zanzara",barbastelleBat:"Barbastello",bechsteinsBat:"Pipistrello di Bechstein",brownLongEaredBat:"Orecchione bruno",greaterHorseshoeBat:"Rinolofo maggiore",fallowDeer:"Daino",redDeer:"Cervo nobile",roeDeerBeech:"Capriolo",roeDeerBirch:"Capriolo",roeDeerHorseChestnut:"Capriolo",roeDeerLinden:"Capriolo",roeDeerSilverFir:"Capriolo",squeaker:"Fringuello",deerAndCloven:"Cervidi e ungulati",wildBoar:"Cinghiale",beechMarten:"Faina",fullyOccupiedTrees:"alberi completamente occupati",brownBear:"Orso bruno",europeanBadger:"Tasso",europeanFatDormouse:"Ghiro",batOnTheOtherSide:"con pipistrello di fronte",europeanHare:"Lepre europea",lynx:"Lince",raccoon:"Procione",redFox:"Volpe",wolf:"Lupo",cave:"Caverna",cardsInCave:"Carte nella caverna",europeanLarch:"Larice europeo",stonePine:"Pino cembro",alpineMarmot:"Marmotta alpina",chamois:"Camoscio",capercaillie:"Gallo cedrone",mountainHare:"Lepre alpina",steinbock:"Stambecco",savisPipistrelle:"Pipistrello pigmeo",phoebusApollo:"Apollo",blackTrumpet:"Trombetta nera",edelweiss:"Stella alpina",blueberry:"Mirtillo",alpineNewt:"Tritone alpino",goldenEagle:"Aquila reale",beardedVulture:"Avvoltoio barbuto",gentian:"Genziana",commonRaven:"Corvo imperiale"}};function ae(e={}){const o={...{countryCodeOnly:!1},...e},s=navigator.languages!==void 0?navigator.languages[0]:navigator.language;return s?o.countryCodeOnly?s.trim().split(/-|_/)[0]:s.trim():void 0}const H=V({locale:ae({countryCodeOnly:!0}),fallbackLocale:"en",messages:re}),ie=H.global,le=j();function ce(e){le(e,{type:"danger"})}const f=(e,t)=>{const o=e.__vccOpts||e;for(const[s,n]of t)o[s]=n;return o},ue={errorCaptured(e,t,o){return console.error(e),ce(e.message),!1}};function me(e,t,o,s,n,r){return B(e.$slots,"default")}const pe=f(ue,[["render",me]]),de={name:"CookieConsent",data(){return{customizing:!1,consent:{given:!1,customizing:!1,technical:!0,tracking:!1,social:!1}}},methods:{consentGiven(){this.consent.given=!0,localStorage.setItem("cookieConsent",JSON.stringify(this.consent)),this.consent.technical&&Z().then(()=>{console.log("Google Analytics tracking turned on.")})},acceptAll(){this.consent.technical=!0,this.consent.tracking=!0,this.consent.social=!0,this.consentGiven()}},mounted(){let e=localStorage.getItem("cookieConsent");e&&(this.consent=JSON.parse(e),this.consentGiven())}},he={key:0,class:"overlay small"},be={class:"cookie-consent shadow rounded"},ye={class:"d-flex justify-content-around"},fe={class:"flex-grow-1"},ge={class:"text-nowrap"},ve={class:"custom-control custom-switch"},Ce=i("input",{type:"checkbox",class:"custom-control-input",id:"customSwitch1",value:"true",disabled:"",checked:""},null,-1),Be={class:"custom-control-label",for:"customSwitch1"},Pe={class:"custom-control custom-switch"},Se={class:"custom-control-label",for:"customSwitch2"},Ae={class:"custom-control custom-switch"},we={class:"custom-control-label",for:"customSwitch3"},ke={class:"mt-2"};function Fe(e,t,o,s,n,r){return n.consent.given?D("",!0):(p(),y("div",he,[i("div",be,[n.customizing?B(e.$slots,"customize",{key:1},()=>[i("div",ve,[Ce,i("label",Be,l(e.$t("cookies.technical")),1)]),i("div",Pe,[S(i("input",{type:"checkbox",class:"custom-control-input",id:"customSwitch2","onUpdate:modelValue":t[2]||(t[2]=a=>e.tracking=a)},null,512),[[A,e.tracking]]),i("label",Se,l(e.$t("cookies.tracking")),1)]),i("div",Ae,[S(i("input",{type:"checkbox",class:"custom-control-input",id:"customSwitch3","onUpdate:modelValue":t[3]||(t[3]=a=>e.social=a)},null,512),[[A,e.social]]),i("label",we,l(e.$t("cookies.tracking")),1)]),i("div",ke,[i("button",{class:"btn btn-sm btn-primary mr-1",onClick:t[4]||(t[4]=(...a)=>r.consentGiven&&r.consentGiven(...a))},l(e.$t("cookies.acceptSelection")),1),i("button",{class:"btn btn-sm btn-primary",onClick:t[5]||(t[5]=(...a)=>r.acceptAll&&r.acceptAll(...a))},l(e.$t("cookies.acceptAll")),1)])]):B(e.$slots,"banner",{key:0},()=>[i("div",ye,[i("div",fe,[b(l(e.$t("cookies.intro"))+": ",1),i("span",{class:"link btn-link",onClick:t[0]||(t[0]=a=>n.customizing=!0)},l(e.$t("cookies.settings")),1),b(". ")]),i("div",ge,[i("button",{class:"btn btn-primary",onClick:t[1]||(t[1]=(...a)=>r.acceptAll&&r.acceptAll(...a))},l(e.$t("cookies.acceptAll")),1)])])])])]))}const De=f(de,[["render",Fe]]),Te={name:"Footer"},_e={class:"footer position-fixed text-center w-100"},Le={class:"text-primary"};function Ee(e,t,o,s,n,r){const a=T("router-link");return p(),y("div",_e,[i("div",Le,[m(a,{to:{name:"imprint"},class:"text-primary"},{default:C(()=>[b(l(e.$t("imprint")),1)]),_:1}),b(" | "),m(a,{class:"text-primary",to:{name:"imprint"}},{default:C(()=>[b(l(e.$t("dataProtection")),1)]),_:1})])])}const He=f(Te,[["render",Ee],["__scopeId","data-v-deaa9e49"]]),Ne="1.0.7",Oe={name:"Version",data(){return{version:Ne}}},Me={class:"version text-info"};function ze(e,t,o,s,n,r){return p(),y("div",Me,l(n.version),1)}const $e=f(Oe,[["render",ze],["__scopeId","data-v-96fe8e0f"]]),Ie=i("header",null,null,-1),Ge={class:"mb-5"},Re={data(){return{currentMode:"production"}},mounted(){console.log("running in mode "+this.currentMode),console.log("base url is https://glaures.github.io/forestshuffle/")}},xe=Object.assign(Re,{__name:"App",setup(e){return(t,o)=>(p(),y(_,null,[Ie,m(pe,null,{default:C(()=>[i("div",Ge,[m($(J))])]),_:1}),t.$route.name==="home"?(p(),I(He,{key:0})):D("",!0),m(De),m($e)],64))}}),qe="modulepreload",We=function(e){return"/forestshuffle/"+e},w={},k=function(t,o,s){let n=Promise.resolve();if(o&&o.length>0){document.getElementsByTagName("link");const r=document.querySelector("meta[property=csp-nonce]"),a=(r==null?void 0:r.nonce)||(r==null?void 0:r.getAttribute("nonce"));n=Promise.all(o.map(c=>{if(c=We(c),c in w)return;w[c]=!0;const v=c.endsWith(".css"),O=v?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${c}"]${O}`))return;const u=document.createElement("link");if(u.rel=v?"stylesheet":qe,v||(u.as="script",u.crossOrigin=""),u.href=c,a&&u.setAttribute("nonce",a),document.head.appendChild(u),v)return new Promise((M,z)=>{u.addEventListener("load",M),u.addEventListener("error",()=>z(new Error(`Unable to preload CSS for ${c}`)))})}))}return n.then(()=>t()).catch(r=>{const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=r,window.dispatchEvent(a),!a.defaultPrevented)throw r})},F=L("game",{state(){return{players:[],currentPlayer:null,alpineExpansion:!0}},actions:{addPlayer(e){if(this.players.find(t=>t.name===e))throw new Error(ie.t("error.nameTaken",[e]));this.players.push({name:e})},selectPlayer(e){this.currentPlayer=this.players.find(t=>t.name===e)},resetPlayers(){this.players=[],this.currentPlayer=null},toggleAlpineExpansion(){this.alpineExpansion=!this.alpineExpansion}}}),Ve={name:"beech",type:"beech",symbols:["tree"],recalculatePoints(e){const t=this.count,s=e.cards.find(n=>n.name==="violetCarpenterBee").params[0].value;t+s>=4?this.points=t*5:this.points=0}},Je={name:"birch",type:"birch",symbols:["tree"],recalculatePoints(e){this.points=this.count}},Ke={name:"douglasFir",type:"douglasFir",symbols:["tree"],recalculatePoints(e){this.points=this.count*5}},Ue={name:"horseChestnut",type:"horseChestnut",symbols:["tree"],recalculatePoints(e){let t=Math.min(this.count,7);const o=e.cards.find(s=>s.name==="violetCarpenterBee");t+=o.params[1].value,this.points=t*t}},je={name:"linden",type:"linden",symbols:["tree"],recalculatePoints(e){this.points=this.count*(e.hasMostOfName("linden")?3:1)}},Ze={name:"oak",type:"oak",symbols:["tree"],recalculatePoints(e){e.cards.filter(o=>o.symbols.indexOf("tree")>=0&&o.name!=="treeSaplings"&&o.count>0).length===8?this.points=this.count*10:this.points=0}},Qe={name:"silverFir",type:"silverFir",symbols:["tree"],params:[{name:"cardsAttachedToSilverFirs",type:"number",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.params[0].value*2}},Xe={name:"sycamore",type:"sycamore",symbols:["tree"],recalculatePoints(e){this.points=e.countByName("sycamore")*e.countBySymbol("tree")}},Ye={name:"treeSaplings",type:"none",symbols:["tree"],recalculatePoints(e){}},et={name:"europeanLarch",type:"alpineLarch",symbols:["tree","alps"],recalculatePoints(e){this.points=this.count*3}},tt={name:"stonePine",type:"stonePine",symbols:["tree","alps"],recalculatePoints(e){this.points=this.count*e.countBySymbol("alps")}},ot=[Ve,Je,Ke,Ue,je,Ze,Qe,Xe,Ye,et,tt],st={name:"bullfinch",position:"top",symbols:["bird"],recalculatePoints(e){this.points=this.count*e.countBySymbol("insect")*2}},nt={name:"chaffinch",position:"top",symbols:["bird"],params:[{name:"chaffinchesAtopABeech",type:"number",value:0}],recalculatePoints(e){this.points=this.params[0].value*5}},rt={name:"eurasianJay",position:"top",symbols:["bird"],recalculatePoints(e){this.points=this.count*3}},at={name:"goshawk",position:"top",symbols:["bird"],recalculatePoints(e){this.points=this.count*e.countBySymbol("bird")*3}},it={name:"greatSpottedWoodpecker",position:"top",symbols:["bird"],recalculatePoints(e){this.points=e.hasMostOfSymbol("tree")?this.count*10:0}},lt={name:"tawnyOwl",position:"top",symbols:["bird"],recalculatePoints(e){this.points=this.count*5}},ct={name:"capercaillie",position:"top",symbols:["bird","alps"],recalculatePoints(e){this.points=this.count*e.countBySymbol("plant")}},ut={name:"goldenEagle",position:"top",symbols:["bird","alps"],recalculatePoints(e){this.points=this.count*(e.countBySymbol("pawedAnimal")+e.countBySymbol("amphibian"))}},mt={name:"beardedVulture",position:"top",symbols:["bird","alps"],recalculatePoints(e){this.points=this.count*e.caveCount}},pt={name:"commonRaven",position:"top",symbols:["bird","alps"],recalculatePoints(e){this.points=this.count*5}},dt=[st,nt,rt,at,it,lt,ct,ut,mt,pt],ht=[0,0,3,6,12,20,35];function bt(e){let t=e.cards.filter(s=>s.symbols.indexOf("butterfly")>=0&&s.count>0).map(s=>s.count),o=0;for(;t.length>0;)o+=ht[t.length],t=t.map(s=>s-1).filter(s=>s>0);return o}const yt={name:"camberwellBeauty",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},ft={name:"peacockButterfly",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},gt={name:"silverWashedFritillary",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},vt={name:"purpleEmperor",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},Ct={name:"largeTortoiseshell",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},Bt={name:"phoebusApollo",position:"top",symbols:["butterfly","insect","alps"],recalculatePoints(e){}},Pt=[yt,ft,gt,vt,Ct,Bt],St={name:"redSquirrel",position:"top",symbols:["pawedAnimal"],params:[{name:"redSquirrelsAtopAnOak",type:"number",value:0}],recalculatePoints(e){this.points=this.params[0].value*5}},At=[St],wt={name:"blackberries",position:"bottom",symbols:["plant"],recalculatePoints(e){this.points=this.count*e.countBySymbol("plant")*2}},kt={name:"moss",position:"bottom",symbols:["plant"],recalculatePoints(e){e.countBySymbol("tree")>=10?this.points=this.count*10:this.points=0}},Ft={name:"treeFerns",position:"bottom",symbols:["plant"],recalculatePoints(e){this.points=this.count*e.countBySymbol("amphibian")*6}},Dt={name:"wildStrawberries",position:"bottom",symbols:["plant"],recalculatePoints(e){e.cards.filter(o=>o.symbols.indexOf("tree")>=0&&o.name!=="treeSaplings"&&o.count>0).length>=8?this.points=this.count*10:this.points=0}},Tt={name:"edelweiss",position:"bottom",symbols:["plant","alps"],recalculatePoints(e){this.points=this.count*3}},_t={name:"blueberry",position:"bottom",symbols:["plant","alps"],recalculatePoints(e){this.points=this.count*2*e.countDistinctBySymbol("bird")}},Lt={name:"gentian",position:"bottom",symbols:["plant","alps"],recalculatePoints(e){this.points=this.count*3*e.countBySymbol("butterfly")}},Et=[wt,Ft,Dt,kt,Tt,_t,Lt],Ht={name:"chanterelle",position:"bottom",symbols:["mushroom"],recalculatePoints(e){}},Nt={name:"flyagaric",position:"bottom",symbols:["mushroom"],recalculatePoints(e){}},Ot={name:"parasolMushroom",position:"bottom",symbols:["mushroom"],recalculatePoints(e){}},Mt={name:"pennyBun",position:"bottom",symbols:["mushroom"],recalculatePoints(e){}},zt={name:"blackTrumpet",position:"bottom",symbols:["mushroom","alps"],recalculatePoints(e){}},$t=[Ht,Nt,Ot,Mt,zt],It={name:"commonToad",position:"bottom",symbols:["amphibian"],params:[{name:"sharingACardSlot",type:"number",value:0}],recalculatePoints(e){this.points=this.params[0].value*5}},Gt={name:"pondTurtle",position:"bottom",symbols:["amphibian"],recalculatePoints(e){this.points=this.count*5}},Rt={name:"treeFrog",position:"bottom",symbols:["amphibian"],recalculatePoints(e){this.points=this.count*e.countByName("gnat")*5}},xt={name:"fireSalamander",position:"bottom",symbols:["amphibian"],recalculatePoints(e){this.points=[0,5,15,25][Math.min(3,this.count)]}},qt={name:"alpineNewt",position:"bottom",symbols:["amphibian","alps"],recalculatePoints(e){this.points=this.count*2*e.countBySymbol("insect")}},Wt=[It,Gt,Rt,xt,qt],Vt={name:"gnat",position:"side",symbols:["insect"],recalculatePoints(e){this.points=e.countByName("gnat")*e.countBySymbol("bat")}},Jt={name:"fireflies",position:"bottom",symbols:["insect"],recalculatePoints(e){this.points=[0,0,10,15,20][Math.min(4,this.count)]}},Kt={name:"woodAnt",position:"bottom",symbols:["insect"],recalculatePoints(e){this.points=this.count*e.countByPosition("bottom")*2}},Ut={name:"stagBeetle",position:"bottom",symbols:["insect"],recalculatePoints(e){this.points=this.count*e.countBySymbol("pawedAnimal")}},jt={name:"violetCarpenterBee",position:"side",symbols:["insect"],params:[{name:"onABeech",type:"number",value:0},{name:"onAHorseChestnut",type:"number",value:0},{name:"onALinden",type:"number",value:0}],recalculatePoints(e){}},Zt=[Vt,Jt,Kt,Ut,jt],Qt={name:"hedgehog",position:"bottom",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*e.countBySymbol("butterfly")*2}},Xt={name:"mole",position:"bottom",symbols:["pawedAnimal"],recalculatePoints(e){}},Yt={name:"beechMarten",position:"side",symbols:["pawedAnimal"],params:[{name:"fullyOccupiedTrees",type:"number",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*5*this.params[0].value}},eo={name:"brownBear",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){}},to={name:"europeanBadger",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*2}},oo={name:"europeanFatDormouse",position:"side",symbols:["pawedAnimal"],params:[{name:"batOnTheOtherSide",type:"number",value:0}],recalculatePoints(e){this.points=this.params[0].value*15}},P=e=>e.countByName("europeanHare")+e.countByName("mountainHare"),so={name:"europeanHare",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*P(e)}},no={name:"lynx",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){e.countByName("roeDeerBeech")+e.countByName("roeDeerBirch")+e.countByName("roeDeerHorseChestnut")+e.countByName("roeDeerLinden")+e.countByName("roeDeerSilverFir")>0?this.points=this.count*10:this.points=0}},ro={name:"raccoon",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){}},ao={name:"redFox",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*P(e)*2}},io={name:"wolf",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*5*e.countBySymbol("deer")}},lo={name:"alpineMarmot",position:"side",symbols:["pawedAnimal","alps"],recalculatePoints(e){this.points=this.count*3*e.countDistinctBySymbol("plant")}},co={name:"mountainHare",position:"side",symbols:["pawedAnimal","alps"],recalculatePoints(e){this.points=this.count*P(e)}},uo=[Qt,Xt,Yt,eo,to,oo,so,no,ro,ao,io,lo,co],g=(e,t)=>e.countDistinctBySymbol("bat")>=3?e.countByName(t)*5:0,mo={name:"barbastelleBat",position:"side",symbols:["bat"],recalculatePoints(e){this.points=g(e,this.name)}},po={name:"bechsteinsBat",position:"side",symbols:["bat"],recalculatePoints(e){this.points=g(e,this.name)}},ho={name:"brownLongEaredBat",position:"side",symbols:["bat"],recalculatePoints(e){this.points=g(e,this.name)}},bo={name:"greaterHorseshoeBat",position:"side",symbols:["bat"],recalculatePoints(e){this.points=g(e,this.name)}},yo={name:"savisPipistrelle",position:"side",symbols:["bat","alps"],recalculatePoints(e){this.points=g(e,this.name)}},fo=[mo,po,ho,bo,yo],go={name:"fallowDeer",position:"side",symbols:["deer","clovenHoofedAnimal"],recalculatePoints(e){this.points=e.countByName("fallowDeer")*3*e.countBySymbol("clovenHoofedAnimal")}},vo={name:"redDeer",position:"side",symbols:["deer","clovenHoofedAnimal"],recalculatePoints(e){this.points=e.countByName("redDeer")*(e.countBySymbol("plant")+e.countBySymbol("tree"))}},Co={name:"roeDeerBeech",type:"beech",position:"side",symbols:["deer","clovenHoofedAnimal"],params:[{name:"beechCount",type:"type",symbol:"beech",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*e.beechCount*3}},Bo={name:"roeDeerBirch",type:"birch",position:"side",symbols:["deer","clovenHoofedAnimal"],params:[{name:"birchCount",type:"type",symbol:"birch",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*e.birchCount*3}},Po={name:"roeDeerHorseChestnut",type:"horseChestnut",position:"side",symbols:["deer","clovenHoofedAnimal"],params:[{name:"horseChestnutCount",type:"type",symbol:"horseChestnut",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*e.horseChestnutCount*3}},So={name:"roeDeerLinden",type:"linden",position:"side",symbols:["deer","clovenHoofedAnimal"],params:[{name:"lindenCount",type:"type",symbol:"linden",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*e.lindenCount*3}},Ao={name:"roeDeerSilverFir",type:"silverFir",position:"side",symbols:["deer","clovenHoofedAnimal"],params:[{name:"silverFirCount",type:"type",symbol:"silverFir",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*e.silverFirCount*3}},wo={name:"squeaker",position:"side",symbols:["clovenHoofedAnimal"],recalculatePoints(e){this.points=this.count}},ko={name:"wildBoar",position:"side",symbols:["clovenHoofedAnimal"],recalculatePoints(e){e.countByName("squeaker")>0?this.points=this.count*10:this.points=0}},Fo={name:"chamois",position:"side",symbols:["clovenHoofedAnimal","alps"],params:[{name:"stonePineCount",type:"type",symbol:"stonePine",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*e.stonePineCount*3}},Do={name:"steinbock",position:"side",symbols:["clovenHoofedAnimal","alps"],recalculatePoints(e){this.points=this.count*10}},To=[go,vo,Co,So,Ao,Po,Bo,wo,ko,Fo,Do],_o=[...ot,...dt,...Pt,...At,...Et,...$t,...Wt,...Zt,...uo,...fo,...To];class Lo{constructor(t,o){this.playerName=t,this.allForrests=o,this.reset()}reset(){this.butterflyPoints=0,this.silverFirCount=0,this.lindenCount=0,this.horseChestnutCount=0,this.birchCount=0,this.beechCount=0,this.sycamoreCount=0,this.douglasFirCount=0,this.oakCount=0,this.europeanLarchCount=0,this.stonePineCount=0,this.caveCount=0,this.points=0,this.cards=[];for(let t of _o){const o={...t};t.params&&(o.params=t.params.map(s=>({...s}))),this.cards.push({...o,count:0,points:0})}}getSymbolCount(t){return this[t+"Count"]}setSymbolCount(t,o){this[t+"Count"]=o,this.updatePoints()}findCard(t){return this.cards[this.cards.findIndex(o=>o.name===t)]}addCard(t){++this.findCard(t).count}removeCard(t){const o=this.findCard(t);o.count=Math.max(0,--o.count),o.count===0&&o.params&&o.params.forEach(s=>s.value=0)}addParam(t,o){const s=this.findCard(t),n=s.params.find(r=>r.name===o);n.value=Math.min(n.unrestricted?99:s.count,n.value+1)}subParam(t,o){const n=this.findCard(t).params.find(r=>r.name===o);n.value=Math.max(0,n.value-1)}updatePoints(){let t=0;for(let o of this.cards.filter(s=>s.count>0))o.recalculatePoints(this),t+=o.points;this.butterflyPoints=bt(this),this.points=t+this.butterflyPoints+this.caveCount}countByName(t){let o=this.cards.find(s=>s.name===t).count;return t==="linden"&&(o+=this.cards.find(s=>s.name==="violetCarpenterBee").params[2].value),o}countBySymbol(t){let o=this.cards.filter(s=>s.symbols.filter(n=>n===t).length>0).reduce((s,n)=>s+=n.count,0);if(t==="tree"){const s=this.cards.find(n=>n.name==="violetCarpenterBee");for(let n of s.params)o+=n.value}return o}countByPosition(t){return this.cards.filter(o=>o.position===t).reduce((o,s)=>o+=s.count,0)}countDistinctBySymbol(t){return this.cards.filter(o=>o.symbols.filter(s=>s===t).length>0).filter(o=>o.count>0).length}hasMostOfName(t){const o=this.countByName(t);let s=!0;const n=this.allForrests.filter(r=>r.playerName!==this.playerName);for(let r of n)r.countByName(t)>o&&(s=!1);return s}hasMostOfSymbol(t){let o=this.countBySymbol(t),s=!0;const n=this.allForrests.filter(r=>r.playerName!==this.playerName);for(let r of n)r.countBySymbol(t)>o&&(s=!1);return s}roeDeerPresent(){return this.countByName("roeDeerBeech")+this.countByName("roeDeerBirch")+this.countByName("roeDeerHorseChestnut")+this.countByName("roeDeerLinden")+this.countByName("roeDeerSilverFir")>0}}const Eo=L("forests",{state:()=>({forests:[]}),getters:{getForestByPlayerName:e=>t=>e.forests.find(o=>o.playerName===t)},actions:{addForest(e){const t=G(new Lo(e,this.forests));return this.forests.push(t),this.updatePointsInAllForests(),t},addCard(e,t){this.getForestByPlayerName(e).addCard(t),this.updatePointsInAllForests()},removeCard(e,t){this.getForestByPlayerName(e).removeCard(t),this.updatePointsInAllForests()},addParam(e,t,o){this.getForestByPlayerName(e).addParam(t,o),this.updatePointsInAllForests()},subParam(e,t,o){this.getForestByPlayerName(e).subParam(t,o),this.updatePointsInAllForests()},setSymbolCount(e,t,o){this.getForestByPlayerName(e).setSymbolCount(t,o),this.updatePointsInAllForests()},addSymbolCount(e,t){const o=this.getForestByPlayerName(e);o.setSymbolCount(t,o.getSymbolCount(t)+1),this.updatePointsInAllForests()},subSymbolCount(e,t){const o=this.getForestByPlayerName(e);o.setSymbolCount(t,Math.max(0,o.getSymbolCount(t)-1)),this.updatePointsInAllForests()},setCaveCount(e,t){this.getForestByPlayerName(e).caveCount=t,this.updatePointsInAllForests()},updatePointsInAllForests(){for(let e of this.forests)e.updatePoints()},reset(){this.forests.forEach(e=>e.reset())}}}),Ho="/forestshuffle/img/splash.png",No={name:"HomeView",components:{FontAwesomeIcon:E},data(){return{newPlayerName:""}},computed:{players(){return F().players}},methods:{addPlayer(){F().addPlayer(this.newPlayerName),Eo().addForest(this.newPlayerName),this.newPlayerName=""}}},Oo=e=>(R("data-v-57359379"),e=e(),x(),e),Mo=Oo(()=>i("div",{class:"splash col-12 col-md-6 offset-md-3"},[i("img",{src:Ho,class:"w-100",alt:"splash"})],-1)),zo={class:"container text-center"},$o={class:"mt-5 fs-1 fw-bold"},Io={class:"fs-5"},Go={class:"mt-3 btn btn-primary btn-sm"};function Ro(e,t,o,s,n,r){const a=T("router-link");return p(),y(_,null,[Mo,i("div",zo,[i("div",$o,l(e.$t("forrestShuffle")),1),i("div",Io,l(e.$t("scoringApp")),1),m(a,{to:{name:"defineForest"}},{default:C(()=>[i("button",Go,l(e.$t("letsGo")),1)]),_:1})])],64)}const xo=f(No,[["render",Ro],["__scopeId","data-v-57359379"]]),N=K({history:U("/forestshuffle/"),routes:[{path:"/",name:"home",component:xo},{path:"/define-forest",name:"defineForest",props:!0,component:()=>k(()=>import("./DefineForestView-BtiIoKrp.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13]))},{path:"/imprint",name:"imprint",props:!0,component:()=>k(()=>import("./ImprintView-DIKFa_Qm.js"),__vite__mapDeps([14,1,2,3,4,5,6,7,8,9,10,11,12,15]))}]});N.beforeEach((e,t,o)=>{const s=e.query.redirect;s?o(s):o()});ne("https://glaures.github.io/forestshuffle/service-worker.js",{ready(){console.log(`App is being served from cache by a service worker.
For more details, visit https://goo.gl/AFskqB`)},registered(){console.log("Service worker has been registered.")},cached(){console.log("Content has been cached for offline use.")},updatefound(){console.log("New content is downloading.")},updated(){console.log("New content is available; please refresh."),caches.keys().then(function(e){for(let t of e)caches.delete(t)})},offline(){console.log("No internet connection found. App is running in offline mode.")},error(e){console.error("Error during service worker registration:",e)}});d.add(X);d.add(Y);d.add(ee);d.add(te);d.add(oe);d.add(se);const h=q(xe);h.use(H);h.use(W());h.use(N);h.use(Q,{config:{id:"G-KFWTPR47EN"}});h.component("font-awesome-icon",E);h.mount("#app");export{Lo as F,f as _,F as a,Eo as u};
