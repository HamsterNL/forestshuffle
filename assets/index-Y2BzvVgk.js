const __vite__fileDeps=["assets/DefineForestView-CJuqoFQ3.js","assets/@fortawesome-BS8eGdaL.js","assets/@vue-nVQ0RcsF.js","assets/bootstrap-De39DNDK.js","assets/@popperjs-WhmJkuoZ.js","assets/bootstrap-DUEfxN0n.css","assets/pinia-Cj4Lcor1.js","assets/vue-i18n-2F-3GSBZ.js","assets/@intlify-Y34EtYYP.js","assets/vue-router-AXQ5_F_T.js","assets/vue-toastification-BHb1mGnt.js","assets/vue-gtag-C-InrC_z.js","assets/register-service-worker-TYP_X6yW.js","assets/DefineForestView-B_B7JFMM.css","assets/ImprintView-BBaZrp3c.js","assets/ImprintView-D08j89TI.css"],__vite__mapDeps=i=>i.map(i=>__vite__fileDeps[i]);
import"./bootstrap-De39DNDK.js";import{V as S,C as d,D as f,N as i,O as p,P as l,X as P,Y as w,M as F,L as _,y as m,K as B,z as E,H as M,F as D,b as G,Z as W,_ as R,W as x}from"./@vue-nVQ0RcsF.js";import{d as T,c as z}from"./pinia-Cj4Lcor1.js";import{c as q}from"./vue-i18n-2F-3GSBZ.js";import{R as V,c as J,a as K}from"./vue-router-AXQ5_F_T.js";import{u as j}from"./vue-toastification-BHb1mGnt.js";import{b as U,i as X}from"./vue-gtag-C-InrC_z.js";import{F as N,l as y,f as Y,a as Z,b as Q,c as ee,d as te}from"./@fortawesome-BS8eGdaL.js";import{r as oe}from"./register-service-worker-TYP_X6yW.js";import"./@popperjs-WhmJkuoZ.js";import"./@intlify-Y34EtYYP.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const r of n)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function o(n){const r={};return n.integrity&&(r.integrity=n.integrity),n.referrerPolicy&&(r.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?r.credentials="include":n.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(n){if(n.ep)return;n.ep=!0;const r=o(n);fetch(n.href,r)}})();const se={en:{cookies:{intro:'This site uses Cookies - for more information on this check our data privacy policy. Click on "Accept all", to accept all cookies or fine tune your cookie settings by clicking here',settings:"Cookie settings",acceptAll:"Accept all",acceptSelection:"Accept selection",technical:"Store relevant data to run this site",tracking:"Store data for anonymous analytics of user interactions with this website",social:"Store data for social media integrations on this website",consentRequired:"Please consent to cookies first"},forrestShuffle:"Forest Shuffle",scoringApp:"Scoring App",letsGo:"Let's go",imprint:"Imprint",dataProtection:"Data Security",points:"Points",player:"Player",treeTypeCount:"Amounts of tree types",startNewGame:"Start new game",resetPlayers:"Reset players","error.nameTaken":"The name {0} is already taken.",trees:"Trees",tops:"Tops",bottoms:"Bottoms",sides:"Sides",birds:"Birds",butterflies:"Butterflies",others:"Others",plants:"Plants",mushrooms:"Mushrooms",amphibians:"Amphibians",insects:"Insects",pawedAnimals:"Pawed Animals",bats:"Bats",deer:"Deer",clovenHoofedAnimal:"Cloven-Hoofed Animal",deerAndCloven:"Deer and cloven-Hoofed Animals",beech:"Beech",birch:"Birch",douglasFir:"Douglas Fir",horseChestnut:"Horse Chestnut",linden:"Linden",oak:"Oak",silverFir:"Silver Fir",cardsAttachedToSilverFirs:"cards attached to silver firs",sycamore:"Sycamore",treeSaplings:"Tree Saplings",bullfinch:"Bullfinch",chaffinch:"Chaffinch",chaffinchesAtopABeech:"atop a beech",eurasianJay:"Eurasian Jay",goshawk:"Goshawk",greatSpottedWoodpecker:"Great Spotted Woodpecker",tawnyOwl:"Tawny Owl",camberwellBeauty:"Camberwell Beauty",peacockButterfly:"Peacock Butterfly",silverWashedFritillary:"Silver-Washed Fritillary",purpleEmperor:"Purple Emperor",largeTortoiseshell:"Large Tortoiseshell",redSquirrel:"Red Squirrel",redSquirrelsAtopAnOak:"atop an oak",blackberries:"Blackberries",chanterelle:"Chanterelle",flyagaric:"Fly Agaric",moss:"Moss",parasolMushroom:"Parasol Mushroom",pennyBun:"Penny Bun",treeFerns:"Tree Ferns",wildStrawberries:"Wild Strawberries",commonToad:"Common Toad",sharingACardSlot:"sharing a card slot",pondTurtle:"Pond Turtle",treeFrog:"Tree Frog",fireSalamander:"Fire Salamander",fireflies:"Fireflies",woodAnt:"Wood Ant",hedgehog:"Hedgehog",mole:"Mole",stagBeetle:"Stag Beetle",violetCarpenterBee:"Violet Carpenter Bee",onABeech:"on a beech",onAHorseChestnut:"on a horse chestnut",onALinden:"on a linden",gnat:"Gnat",barbastelleBat:"Barbastelle Bat",bechsteinsBat:"Bechstein's Bat",brownLongEaredBat:"Brown Long-Eared Bat",greaterHorseshoeBat:"Greater Horseshoe Bat",fallowDeer:"Fallow Deer",redDeer:"Red Deer",roeDeerBeech:"Roe Deer (Beech, dark green)",roeDeerBirch:"Roe Deer (Birch, light green)",roeDeerHorseChestnut:"Roe Deer (Horse Chestnut, orange)",roeDeerLinden:"Roe Deer (Linden, yellow)",roeDeerSilverFir:"Roe Deer (Silver Fir, dark blue)",squeaker:"Squeaker",wildBoar:"Wild Boar",beechMarten:"Beech Marten",fullyOccupiedTrees:"fully occupied trees",brownBear:"Brown Bear",europeanBadger:"European Badger",europeanFatDormouse:"European Fat Dormouse",batOnTheOtherSide:"with bat on the opposite",europeanHare:"European Hare",lynx:"Lynx",raccoon:"Raccoon",redFox:"Red Fox",wolf:"Wolf",cave:"Cave",cardsInCave:"Cards in cave"},de:{cookies:{intro:'Diese Website verwendet Cookies - nähere Information dazu und zu Deinen Rechten als Benutzer findest Du in unserer Datenschutzerklärung. Klicke auf "Alle annehmen", um Cookies zu akzeptieren und direkt unsere Website benutzen zu können, oder verwalte Deine Cookies indem Du hier klickst',settings:"Cookie Einstellungen",acceptAll:"Alle annehmen",acceptSelection:"Auswahl bestätigen",technical:"Für Speicherung von für die   Funktion der Website essentiellen Daten",tracking:"Für die anonymisierte Analyse des Nutzerverhalten notwendige Daten speichern",social:"Social Media auf der Website ermöglichen",consentRequired:"Please consent to cookies first"},forrestShuffle:"Mischwald",scoringApp:"Wertungs-App",imprint:"Impressum",dataProtection:"Datenschutz",letsGo:"Los geht's",points:"Punkte",player:"Spieler",treeTypeCount:"Anzahl Baumtypen-Symbole",startNewGame:"Neues Spiel starten",resetPlayers:"Spieler zurücksetzen","error.nameTaken":"Der Name {0} ist bereits vergeben.",trees:"Bäume",tops:"Oben",bottoms:"Unten",sides:"Seiten",birds:"Vögel",butterflies:"Schmetterlinge",others:"Weitere",plants:"Pflanzen",mushrooms:"Pilze",amphibians:"Amphibien",insects:"Insekten",pawedAnimals:"Pfotentiere",bats:"Fledermäuse",deer:"Hirsch",clovenHoofedAnimal:"Paarhufer",beech:"Buche",birch:"Birke",douglasFir:"Douglasie",horseChestnut:"Kastanie",linden:"Linde",oak:"Eiche",silverFir:"Tanne",cardsAttachedToSilverFirs:"Karten, die an Tannen liegen",sycamore:"Ahorn",treeSaplings:"Sprössling",bullfinch:"Gimpel",chaffinch:"Buchfink",chaffinchesAtopABeech:"auf einer Buche",eurasianJay:"Eichelhäher,",goshawk:"Habicht",greatSpottedWoodpecker:"Buntspecht",tawnyOwl:"Waldkauz",camberwellBeauty:"Trauermantel",peacockButterfly:"Tagpfauenauge",silverWashedFritillary:"Kaisermantel",purpleEmperor:"Schillerfalter",largeTortoiseshell:"Großer Fuchs",redSquirrel:"Eichhörnchen",redSquirrelsAtopAnOak:"auf einer Eiche",blackberries:"Brombeeren",chanterelle:"Pfifferling",flyagaric:"Fliegenpilz",moss:"Moos",parasolMushroom:"Parasol",pennyBun:"Steinpilz",treeFerns:"Baumfarn",wildStrawberries:"Walderdbeeren",commonToad:"Erdkröte",sharingACardSlot:"teilen sich den Platz",pondTurtle:"Sumpfschildkröte",treeFrog:"Laubfrosch",fireSalamander:"Feuersalamander",fireflies:"Glühwürmchen",woodAnt:"Waldameise",hedgehog:"Igel",mole:"Maulwurf",stagBeetle:"Hirschkäfer",violetCarpenterBee:"Holzbiene",onABeech:"auf einer Buche",onAHorseChestnut:"auf einer Kastanie",onALinden:"auf einer Linde",gnat:"Stechmücke",barbastelleBat:"Mops-Fledermaus",bechsteinsBat:"Bechstein-Fledermaus",brownLongEaredBat:"Braunes Langohr",greaterHorseshoeBat:"Hufeisennase",fallowDeer:"Damhirsch",redDeer:"Rothirsch",roeDeerBeech:"Reh (Buche, dunkelgrün)",roeDeerBirch:"Reh (Birke, hellgrün)",roeDeerHorseChestnut:"Reh (Kastanie, orange)",roeDeerLinden:"Reh (Linde, gelb)",roeDeerSilverFir:"Reh (Tanne, dunkelblau)",squeaker:"Frischling",deerAndCloven:"Rotwild und Huftiere",wildBoar:"Wildschwein",beechMarten:"Steinmarder",fullyOccupiedTrees:"voll besetzte Bäume",brownBear:"Braunbär",europeanBadger:"Dachs",europeanFatDormouse:"Siebenschläfer",batOnTheOtherSide:"mit Fledermaus auf der gegenüberliegenden Seite",europeanHare:"Feldhase",lynx:"Lynx",raccoon:"Waschbär",redFox:"Fuchs",wolf:"Wolf",cave:"Höhle",cardsInCave:"Karten in der Höhle"},fr:{cookies:{intro:`Ce site utilise des cookies - pour plus d'informations, consultez notre politique de confidentialité des données. Cliquez sur "Accepter tout", pour accepter tous les cookies ou ajustez vos paramètres de cookies en cliquant ici`,settings:"Paramètres des cookies",acceptAll:"Tout accepter",acceptSelection:"Accepter la sélection",technical:"Stocker les données pertinentes pour faire fonctionner ce site",tracking:"Stocker les données pour l'analyse anonyme des interactions des utilisateurs avec ce site",social:"Stocker les données pour les intégrations de médias sociaux sur ce site",consentRequired:"Veuillez d'abord consentir aux cookies"},forrestShuffle:"Forêt Mixte",scoringApp:"Application de Score",letsGo:"Allons-y",imprint:"Empreinte",dataProtection:"Sécurité des Données",points:"Points",player:"Joueur",treeTypeCount:"Nombre de types d'arbres",startNewGame:"Commencer une nouvelle partie",resetPlayers:"Réinitialiser les joueurs","error.nameTaken":"Le nom {0} est déjà pris.",trees:"Arbres",tops:"Hauts",bottoms:"Bas",sides:"Côtés",birds:"Oiseaux",butterflies:"Papillons",others:"Autres",plants:"Plantes",mushrooms:"Champignons",amphibians:"Amphibiens",insects:"Insectes",pawedAnimals:"Plantigrades / digitigrades",bats:"Chauves-souris",deer:"Cerfs",clovenHoofedAnimal:"Animal à sabots fendus",deerAndCloven:"Cerfs et animaux à sabots fendus",beech:"Hêtre",birch:"Bouleau",douglasFir:"Sapin de Douglas",horseChestnut:"Marronnier d'Inde",linden:"Tilleul",oak:"Chêne",silverFir:"Sapin argenté",cardsAttachedToSilverFirs:"cartes attachées aux sapins argentés",sycamore:"Sycomore",treeSaplings:"Jeunes pousses d'arbres",bullfinch:"Bouvreuil",chaffinch:"Pinson des arbres",chaffinchesAtopABeech:"au sommet d'un hêtre",eurasianJay:"Geai des chênes",goshawk:"Autour des palombes",greatSpottedWoodpecker:"Pic épeiche",tawnyOwl:"Chouette hulotte",camberwellBeauty:"Grand Admiral",peacockButterfly:"Paon du jour",silverWashedFritillary:"Tabac d'Espagne",purpleEmperor:"Grand Mars changeant",largeTortoiseshell:"Grande Tortue",redSquirrel:"Écureuil roux",redSquirrelsAtopAnOak:"au sommet d'un chêne",blackberries:"Mûres",chanterelle:"Girolle",flyagaric:"Amanite tue-mouches",moss:"Mousse",parasolMushroom:"Coulemelle",pennyBun:"Cèpe de Bordeaux",treeFerns:"Fougères arborescentes",wildStrawberries:"Fraises des bois",commonToad:"Crapaud commun",sharingACardSlot:"partageant un emplacement de carte",pondTurtle:"Cistude d'Europe",treeFrog:"Rainette",fireSalamander:"Salamandre tachetée",fireflies:"Luciole",woodAnt:"Fourmi rousse",hedgehog:"Hérisson",mole:"Taupe",stagBeetle:"Lucane cerf-volant",violetCarpenterBee:"Abeille charpentière violette",onABeech:"sur un hêtre",onAHorseChestnut:"sur un marronnier d'Inde",onALinden:"sur un tilleul",gnat:"Moucheron",barbastelleBat:"Barbastelle",bechsteinsBat:"Chauve-souris de Bechstein",brownLongEaredBat:"Oreillard brun",greaterHorseshoeBat:"Grand rhinolophe",fallowDeer:"Daim",redDeer:"Cerf élaphe",roeDeerBeech:"Chevreuil (Hêtre, vert foncé)",roeDeerBirch:"Chevreuil (Bouleau, vert clair)",roeDeerHorseChestnut:"Chevreuil (Marronnier d'Inde, orange)",roeDeerLinden:"Chevreuil (Tilleul, jaune)",roeDeerSilverFir:"Chevreuil (Sapin argenté, bleu foncé)",squeaker:"Crécelle",wildBoar:"Sanglier",beechMarten:"Fouine",fullyOccupiedTrees:"arbres entièrement occupés",brownBear:"Ours brun",europeanBadger:"Blaireau européen",europeanFatDormouse:"Loir",batOnTheOtherSide:"avec une chauve-souris de l'autre côté",europeanHare:"Lièvre européen",lynx:"Lynx",raccoon:"Raton laveur",redFox:"Renard roux",wolf:"Loup",cave:"Grotte",cardsInCave:"Cartes dans la grotte"}};function ne(e={}){const o={...{countryCodeOnly:!1},...e},s=navigator.languages!==void 0?navigator.languages[0]:navigator.language;return s?o.countryCodeOnly?s.trim().split(/-|_/)[0]:s.trim():void 0}const H=q({locale:ne({countryCodeOnly:!0}),fallbackLocale:"en",messages:se}),re=H.global,ae=j();function ie(e){ae(e,{type:"danger"})}const b=(e,t)=>{const o=e.__vccOpts||e;for(const[s,n]of t)o[s]=n;return o},le={errorCaptured(e,t,o){return console.error(e),ie(e.message),!1}};function ce(e,t,o,s,n,r){return S(e.$slots,"default")}const ue=b(le,[["render",ce]]),me={name:"CookieConsent",data(){return{customizing:!1,consent:{given:!1,customizing:!1,technical:!0,tracking:!1,social:!1}}},methods:{consentGiven(){this.consent.given=!0,localStorage.setItem("cookieConsent",JSON.stringify(this.consent)),this.consent.technical&&U().then(()=>{console.log("Google Analytics tracking turned on.")})},acceptAll(){this.consent.technical=!0,this.consent.tracking=!0,this.consent.social=!0,this.consentGiven()}},mounted(){let e=localStorage.getItem("cookieConsent");e&&(this.consent=JSON.parse(e),this.consentGiven())}},de={key:0,class:"overlay small"},he={class:"cookie-consent shadow rounded"},pe={class:"d-flex justify-content-around"},fe={class:"flex-grow-1"},ye={class:"text-nowrap"},be={class:"custom-control custom-switch"},ge=i("input",{type:"checkbox",class:"custom-control-input",id:"customSwitch1",value:"true",disabled:"",checked:""},null,-1),Be={class:"custom-control-label",for:"customSwitch1"},ve={class:"custom-control custom-switch"},Se={class:"custom-control-label",for:"customSwitch2"},Pe={class:"custom-control custom-switch"},we={class:"custom-control-label",for:"customSwitch3"},Ce={class:"mt-2"};function ke(e,t,o,s,n,r){return n.consent.given?F("",!0):(d(),f("div",de,[i("div",he,[n.customizing?S(e.$slots,"customize",{key:1},()=>[i("div",be,[ge,i("label",Be,l(e.$t("cookies.technical")),1)]),i("div",ve,[P(i("input",{type:"checkbox",class:"custom-control-input",id:"customSwitch2","onUpdate:modelValue":t[2]||(t[2]=a=>e.tracking=a)},null,512),[[w,e.tracking]]),i("label",Se,l(e.$t("cookies.tracking")),1)]),i("div",Pe,[P(i("input",{type:"checkbox",class:"custom-control-input",id:"customSwitch3","onUpdate:modelValue":t[3]||(t[3]=a=>e.social=a)},null,512),[[w,e.social]]),i("label",we,l(e.$t("cookies.tracking")),1)]),i("div",Ce,[i("button",{class:"btn btn-sm btn-primary mr-1",onClick:t[4]||(t[4]=(...a)=>r.consentGiven&&r.consentGiven(...a))},l(e.$t("cookies.acceptSelection")),1),i("button",{class:"btn btn-sm btn-primary",onClick:t[5]||(t[5]=(...a)=>r.acceptAll&&r.acceptAll(...a))},l(e.$t("cookies.acceptAll")),1)])]):S(e.$slots,"banner",{key:0},()=>[i("div",pe,[i("div",fe,[p(l(e.$t("cookies.intro"))+": ",1),i("span",{class:"link btn-link",onClick:t[0]||(t[0]=a=>n.customizing=!0)},l(e.$t("cookies.settings")),1),p(". ")]),i("div",ye,[i("button",{class:"btn btn-primary",onClick:t[1]||(t[1]=(...a)=>r.acceptAll&&r.acceptAll(...a))},l(e.$t("cookies.acceptAll")),1)])])])])]))}const Ae=b(me,[["render",ke]]),Fe={name:"Footer"},_e={class:"footer position-fixed text-center w-100"},De={class:"text-primary"};function Te(e,t,o,s,n,r){const a=_("router-link");return d(),f("div",_e,[i("div",De,[m(a,{to:{name:"imprint"},class:"text-primary"},{default:B(()=>[p(l(e.$t("imprint")),1)]),_:1}),p(" | "),m(a,{class:"text-primary",to:{name:"imprint"}},{default:B(()=>[p(l(e.$t("dataProtection")),1)]),_:1})])])}const Ne=b(Fe,[["render",Te],["__scopeId","data-v-deaa9e49"]]),He="0.9.6",Oe={name:"Version",data(){return{version:He}}},Le={class:"version text-info"};function $e(e,t,o,s,n,r){return d(),f("div",Le,l(n.version),1)}const Ie=b(Oe,[["render",$e],["__scopeId","data-v-96fe8e0f"]]),Ee=i("header",null,null,-1),Me={class:"mb-5"},Ge={data(){return{currentMode:"production"}},mounted(){console.log("running in mode "+this.currentMode),console.log("base url is https://glaures.github.io/forestshuffle/")}},We=Object.assign(Ge,{__name:"App",setup(e){return(t,o)=>(d(),f(D,null,[Ee,m(ue,null,{default:B(()=>[i("div",Me,[m(E(V))])]),_:1}),t.$route.name==="home"?(d(),M(Ne,{key:0})):F("",!0),m(Ae),m(Ie)],64))}}),Re="modulepreload",xe=function(e){return"/forestshuffle/"+e},C={},k=function(t,o,s){let n=Promise.resolve();if(o&&o.length>0){document.getElementsByTagName("link");const r=document.querySelector("meta[property=csp-nonce]"),a=(r==null?void 0:r.nonce)||(r==null?void 0:r.getAttribute("nonce"));n=Promise.all(o.map(c=>{if(c=xe(c),c in C)return;C[c]=!0;const g=c.endsWith(".css"),L=g?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${c}"]${L}`))return;const u=document.createElement("link");if(u.rel=g?"stylesheet":Re,g||(u.as="script",u.crossOrigin=""),u.href=c,a&&u.setAttribute("nonce",a),document.head.appendChild(u),g)return new Promise(($,I)=>{u.addEventListener("load",$),u.addEventListener("error",()=>I(new Error(`Unable to preload CSS for ${c}`)))})}))}return n.then(()=>t()).catch(r=>{const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=r,window.dispatchEvent(a),!a.defaultPrevented)throw r})},A=T("game",{state(){return{players:[],currentPlayer:null}},actions:{addPlayer(e){if(this.players.find(t=>t.name===e))throw new Error(re.t("error.nameTaken",[e]));this.players.push({name:e})},selectPlayer(e){this.currentPlayer=this.players.find(t=>t.name===e)},resetPlayers(){this.players=[],this.currentPlayer=null}}}),ze={name:"bullfinch",position:"top",symbols:["bird"],recalculatePoints(e){this.points=e.countByName("douglasFir")*e.countBySymbol("insect")}},qe={name:"chaffinch",position:"top",symbols:["bird"],params:[{name:"chaffinchesAtopABeech",type:"number",value:0}],recalculatePoints(e){this.points=this.params[0].value*5}},Ve={name:"eurasianJay",position:"top",symbols:["bird"],recalculatePoints(e){this.points=e.countByName("eurasianJay")*3}},Je={name:"goshawk",position:"top",symbols:["bird"],recalculatePoints(e){this.points=e.countByName("goshawk")*e.countBySymbol("bird")*3}},Ke={name:"greatSpottedWoodpecker",position:"top",symbols:["bird"],recalculatePoints(e){this.points=e.hasMostOfSymbol("tree")?e.countByName("greatSpottedWoodpecker")*10:0}},je={name:"tawnyOwl",position:"top",symbols:["bird"],recalculatePoints(e){this.points=e.countByName("tawnyOwl")*5}},Ue=[ze,qe,Ve,Je,Ke,je],Xe={name:"beech",type:"beech",symbols:["tree"],recalculatePoints(e){const t=e.countByName("beech"),s=e.cards.find(n=>n.name==="violetCarpenterBee").params[0].value;t+s>=4?this.points=t*5:this.points=0}},Ye={name:"birch",type:"birch",symbols:["tree"],recalculatePoints(e){this.points=e.countByName("birch")}},Ze={name:"douglasFir",type:"douglasFir",symbols:["tree"],recalculatePoints(e){this.points=e.countByName("douglasFir")*5}},Qe={name:"horseChestnut",type:"horseChestnut",symbols:["tree"],recalculatePoints(e){let t=Math.min(e.countByName("horseChestnut"),7);const o=e.cards.find(s=>s.name==="violetCarpenterBee");t+=o.params[1].value,this.points=t*t}},et={name:"linden",type:"linden",symbols:["tree"],recalculatePoints(e){const t=e.countByName("linden");this.points=t*(e.hasMostOfName("linden")?3:1)}},tt={name:"oak",type:"oak",symbols:["tree"],recalculatePoints(e){e.cards.filter(o=>o.symbols.indexOf("tree")>=0&&o.name!=="treeSaplings"&&o.count>0).length===8?this.points=e.countByName("oak")*10:this.points=0}},ot={name:"silverFir",type:"silverFir",symbols:["tree"],params:[{name:"cardsAttachedToSilverFirs",type:"number",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.params[0].value*2}},st={name:"sycamore",type:"sycamore",symbols:["tree"],recalculatePoints(e){this.points=e.countByName("sycamore")*e.countBySymbol("tree")}},nt={name:"treeSaplings",type:"none",symbols:["tree"],recalculatePoints(e){}},rt=[Xe,Ye,Ze,Qe,et,tt,ot,st,nt],at=[0,0,3,6,12,20,35];function it(e){let t=e.cards.filter(s=>s.symbols.indexOf("butterfly")>=0&&s.count>0).map(s=>s.count),o=0;for(;t.length>0;)o+=at[t.length],t=t.map(s=>s-1).filter(s=>s>0);return o}const lt={name:"camberwellBeauty",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},ct={name:"peacockButterfly",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},ut={name:"silverWashedFritillary",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},mt={name:"purpleEmperor",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},dt={name:"largeTortoiseshell",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},ht=[lt,ct,ut,mt,dt],pt={name:"redSquirrel",position:"top",symbols:["pawedAnimal"],params:[{name:"redSquirrelsAtopAnOak",type:"number",value:0}],recalculatePoints(e){this.points=this.params[0].value*5}},ft=[pt],yt={name:"blackberries",position:"bottom",symbols:["plant"],recalculatePoints(e){this.points=e.countByName("blackberries")*e.countBySymbol("plant")*2}},bt={name:"moss",position:"bottom",symbols:["plant"],recalculatePoints(e){e.countBySymbol("tree")>=10?this.points=e.countByName("moss")*10:this.points=0}},gt={name:"treeFerns",position:"bottom",symbols:["plant"],recalculatePoints(e){this.points=e.countByName("treeFerns")*e.countBySymbol("amphibian")*6}},Bt={name:"wildStrawberries",position:"bottom",symbols:["plant"],recalculatePoints(e){e.cards.filter(o=>o.symbols.indexOf("tree")>=0&&o.name!=="treeSaplings"&&o.count>0).length===8?this.points=e.countByName("wildStrawberries")*10:this.points=0}},vt=[yt,gt,Bt,bt],St={name:"chanterelle",position:"bottom",symbols:["mushroom"],recalculatePoints(e){}},Pt={name:"flyagaric",position:"bottom",symbols:["mushroom"],recalculatePoints(e){}},wt={name:"parasolMushroom",position:"bottom",symbols:["mushroom"],recalculatePoints(e){}},Ct={name:"pennyBun",position:"bottom",symbols:["mushroom"],recalculatePoints(e){}},kt=[St,Pt,wt,Ct],At={name:"commonToad",position:"bottom",symbols:["amphibian"],params:[{name:"sharingACardSlot",type:"number",value:0}],recalculatePoints(e){this.points=this.params[0].value*5}},Ft={name:"pondTurtle",position:"bottom",symbols:["amphibian"],recalculatePoints(e){this.points=this.count*5}},_t={name:"treeFrog",position:"bottom",symbols:["amphibian"],recalculatePoints(e){this.points=this.count*e.countByName("gnat")*5}},Dt={name:"fireSalamander",position:"bottom",symbols:["amphibian"],recalculatePoints(e){this.points=[0,5,15,25][Math.min(3,this.count)]}},Tt=[At,Ft,_t,Dt],Nt={name:"gnat",position:"side",symbols:["insect"],recalculatePoints(e){this.points=e.countByName("gnat")*e.countBySymbol("bat")}},Ht={name:"fireflies",position:"bottom",symbols:["insect"],recalculatePoints(e){this.points=[0,0,10,15,20][Math.min(4,this.count)]}},Ot={name:"woodAnt",position:"bottom",symbols:["insect"],recalculatePoints(e){this.points=this.count*e.countByPosition("bottom")*2}},Lt={name:"stagBeetle",position:"bottom",symbols:["insect"],recalculatePoints(e){this.points=this.count*e.countBySymbol("pawedAnimal")}},$t={name:"violetCarpenterBee",position:"side",symbols:["insect"],params:[{name:"onABeech",type:"number",value:0},{name:"onAHorseChestnut",type:"number",value:0},{name:"onALinden",type:"number",value:0}],recalculatePoints(e){}},It=[Nt,Ht,Ot,Lt,$t],Et={name:"hedgehog",position:"bottom",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*e.countBySymbol("butterfly")*2}},Mt={name:"mole",position:"bottom",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*e.countBySymbol("pawedAnimal")*2}},Gt={name:"beechMarten",position:"side",symbols:["pawedAnimal"],params:[{name:"fullyOccupiedTrees",type:"number",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*5*this.params[0].value}},Wt={name:"brownBear",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){}},Rt={name:"europeanBadger",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*2}},xt={name:"europeanFatDormouse",position:"side",symbols:["pawedAnimal"],params:[{name:"batOnTheOtherSide",type:"number",value:0}],recalculatePoints(e){this.points=this.params[0].value*15}},zt={name:"europeanHare",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){this.points=e.countByName("europeanHare")*this.count}},qt={name:"lynx",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){e.countByName("roeDeerBeech")+e.countByName("roeDeerBirch")+e.countByName("roeDeerHorseChestnut")+e.countByName("roeDeerLinden")+e.countByName("roeDeerSilverFir")>0?this.points=this.count*10:this.points=0}},Vt={name:"raccoon",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){}},Jt={name:"redFox",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*e.countByName("europeanHare")*2}},Kt={name:"wolf",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*5*e.countBySymbol("deer")}},jt=[Et,Mt,Gt,Wt,Rt,xt,zt,qt,Vt,Jt,Kt],v=(e,t)=>e.countDistinctBySymbol("bat")>=3?e.countByName(t)*5:0,Ut={name:"barbastelleBat",position:"side",symbols:["bat"],recalculatePoints(e){this.points=v(e,this.name)}},Xt={name:"bechsteinsBat",position:"side",symbols:["bat"],recalculatePoints(e){this.points=v(e,this.name)}},Yt={name:"brownLongEaredBat",position:"side",symbols:["bat"],recalculatePoints(e){this.points=v(e,this.name)}},Zt={name:"greaterHorseshoeBat",position:"side",symbols:["bat"],recalculatePoints(e){this.points=v(e,this.name)}},Qt=[Ut,Xt,Yt,Zt],eo={name:"fallowDeer",position:"side",symbols:["deer","clovenHoofedAnimal"],recalculatePoints(e){this.points=e.countByName("fallowDeer")*3*e.countBySymbol("clovenHoofedAnimal")}},to={name:"redDeer",position:"side",symbols:["deer","clovenHoofedAnimal"],recalculatePoints(e){this.points=e.countByName("redDeer")*(e.countBySymbol("plant")+e.countBySymbol("tree"))}},oo={name:"roeDeerBeech",position:"side",symbols:["deer","clovenHoofedAnimal"],recalculatePoints(e){this.points=this.count*e.beechCount*3}},so={name:"roeDeerBirch",position:"side",symbols:["deer","clovenHoofedAnimal"],recalculatePoints(e){this.points=this.count*e.birchCount*3}},no={name:"roeDeerHorseChestnut",position:"side",symbols:["deer","clovenHoofedAnimal"],recalculatePoints(e){this.points=this.count*e.horseChestnutCount*3}},ro={name:"roeDeerLinden",position:"side",symbols:["deer","clovenHoofedAnimal"],recalculatePoints(e){this.points=this.count*e.lindenCount*3}},ao={name:"roeDeerSilverFir",position:"side",symbols:["deer","clovenHoofedAnimal"],recalculatePoints(e){this.points=this.count*e.silverFirCount*3}},io={name:"squeaker",position:"side",symbols:["clovenHoofedAnimal"],recalculatePoints(e){this.points=this.count}},lo={name:"wildBoar",position:"side",symbols:["clovenHoofedAnimal"],recalculatePoints(e){e.countByName("squeaker")>0?this.points=this.count*10:this.points=0}},co=[eo,to,oo,ro,ao,no,so,io,lo],uo=[...rt,...Ue,...ht,...ft,...vt,...kt,...Tt,...It,...jt,...Qt,...co];class mo{constructor(t,o){this.playerName=t,this.allForrests=o,this.reset()}reset(){this.butterflyPoints=0,this.silverFirCount=0,this.lindenCount=0,this.horseChestnutCount=0,this.birchCount=0,this.beechCount=0,this.caveCount=0,this.points=0,this.cards=[];for(let t of uo){const o={...t};t.params&&(o.params=t.params.map(s=>({...s}))),this.cards.push({...o,count:0,points:0})}}getSymbolCount(t){return this[t+"Count"]}setSymbolCount(t,o){this[t+"Count"]=o,this.updatePoints()}findCard(t){return this.cards[this.cards.findIndex(o=>o.name===t)]}addCard(t){++this.findCard(t).count}removeCard(t){const o=this.findCard(t);o.count=Math.max(0,--o.count)}addParam(t,o){const s=this.findCard(t),n=s.params.find(r=>r.name===o);n.value=Math.min(n.unrestricted?99:s.count,n.value+1)}subParam(t,o){const n=this.findCard(t).params.find(r=>r.name===o);n.value=Math.max(0,n.value-1)}updatePoints(){let t=0;for(let o of this.cards.filter(s=>s.count>0))o.recalculatePoints(this),t+=o.points;this.butterflyPoints=it(this),this.points=t+this.butterflyPoints+this.caveCount}countByName(t){let o=this.cards.find(s=>s.name===t).count;return t==="linden"&&(o+=this.cards.find(s=>s.name==="violetCarpenterBee").params[2].value),o}countBySymbol(t){let o=this.cards.filter(s=>s.symbols.filter(n=>n===t).length>0).reduce((s,n)=>s+=n.count,0);if(t==="tree"){const s=this.cards.find(n=>n.name==="violetCarpenterBee");for(let n of s.params)o+=n.value}return o}countByPosition(t){return this.cards.filter(o=>o.position===t).reduce((o,s)=>o+=s.count,0)}countDistinctBySymbol(t){return this.cards.filter(o=>o.symbols.filter(s=>s===t).length>0).filter(o=>o.count>0).length}hasMostOfName(t){const o=this.countByName(t);let s=!0;const n=this.allForrests.filter(r=>r.playerName!==this.playerName);for(let r of n)r.countByName(t)>o&&(s=!1);return s}hasMostOfSymbol(t){let o=this.countBySymbol(t),s=!0;const n=this.allForrests.filter(r=>r.playerName!==this.playerName);for(let r of n)r.countBySymbol(t)>o&&(s=!1);return s}roeDeerPresent(){return this.countByName("roeDeerBeech")+this.countByName("roeDeerBirch")+this.countByName("roeDeerHorseChestnut")+this.countByName("roeDeerLinden")+this.countByName("roeDeerSilverFir")>0}}const ho=T("forests",{state:()=>({forests:[]}),getters:{getForestByPlayerName:e=>t=>e.forests.find(o=>o.playerName===t)},actions:{addForest(e){const t=G(new mo(e,this.forests));return this.forests.push(t),this.updatePointsInAllForests(),t},addCard(e,t){this.getForestByPlayerName(e).addCard(t),this.updatePointsInAllForests()},removeCard(e,t){this.getForestByPlayerName(e).removeCard(t),this.updatePointsInAllForests()},addParam(e,t,o){this.getForestByPlayerName(e).addParam(t,o),this.updatePointsInAllForests()},subParam(e,t,o){this.getForestByPlayerName(e).subParam(t,o),this.updatePointsInAllForests()},setSymbolCount(e,t,o){this.getForestByPlayerName(e).setSymbolCount(t,o),this.updatePointsInAllForests()},addSymbolCount(e,t){const o=this.getForestByPlayerName(e);o.setSymbolCount(t,o.getSymbolCount(t)+1),this.updatePointsInAllForests()},setCaveCount(e,t){this.getForestByPlayerName(e).caveCount=t,this.updatePointsInAllForests()},updatePointsInAllForests(){for(let e of this.forests)e.updatePoints()},reset(){this.forests.forEach(e=>e.reset())}}}),po="/forestshuffle/img/splash.png",fo={name:"HomeView",components:{FontAwesomeIcon:N},data(){return{newPlayerName:""}},computed:{players(){return A().players}},methods:{addPlayer(){A().addPlayer(this.newPlayerName),ho().addForest(this.newPlayerName),this.newPlayerName=""}}},yo=e=>(W("data-v-57359379"),e=e(),R(),e),bo=yo(()=>i("div",{class:"splash col-12 col-md-6 offset-md-3"},[i("img",{src:po,class:"w-100",alt:"splash"})],-1)),go={class:"container text-center"},Bo={class:"mt-5 fs-1 fw-bold"},vo={class:"fs-5"},So={class:"mt-3 btn btn-primary btn-sm"};function Po(e,t,o,s,n,r){const a=_("router-link");return d(),f(D,null,[bo,i("div",go,[i("div",Bo,l(e.$t("forrestShuffle")),1),i("div",vo,l(e.$t("scoringApp")),1),m(a,{to:{name:"defineForest"}},{default:B(()=>[i("button",So,l(e.$t("letsGo")),1)]),_:1})])],64)}const wo=b(fo,[["render",Po],["__scopeId","data-v-57359379"]]),O=J({history:K("/forestshuffle/"),routes:[{path:"/",name:"home",component:wo},{path:"/define-forest",name:"defineForest",props:!0,component:()=>k(()=>import("./DefineForestView-CJuqoFQ3.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13]))},{path:"/imprint",name:"imprint",props:!0,component:()=>k(()=>import("./ImprintView-BBaZrp3c.js"),__vite__mapDeps([14,1,2,3,4,5,6,7,8,9,10,11,12,15]))}]});O.beforeEach((e,t,o)=>{const s=e.query.redirect;s?o(s):o()});oe("https://glaures.github.io/forestshuffle/service-worker.js",{ready(){console.log(`App is being served from cache by a service worker.
For more details, visit https://goo.gl/AFskqB`)},registered(){console.log("Service worker has been registered.")},cached(){console.log("Content has been cached for offline use.")},updatefound(){console.log("New content is downloading.")},updated(){console.log("New content is available; please refresh."),caches.keys().then(function(e){for(let t of e)caches.delete(t)})},offline(){console.log("No internet connection found. App is running in offline mode.")},error(e){console.error("Error during service worker registration:",e)}});y.add(Y);y.add(Z);y.add(Q);y.add(ee);y.add(te);const h=x(We);h.use(H);h.use(z());h.use(O);h.use(X,{config:{id:"G-KFWTPR47EN"}});h.component("font-awesome-icon",N);h.mount("#app");export{mo as F,b as _,A as a,ho as u};
