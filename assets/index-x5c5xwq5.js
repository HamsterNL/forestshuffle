const __vite__fileDeps=["assets/DefineForestView-B999k_d7.js","assets/@fortawesome-uLFEI7sP.js","assets/@vue-9tgEZASq.js","assets/vue-gtag-CUNIFPiK.js","assets/bootstrap-De39DNDK.js","assets/@popperjs-WhmJkuoZ.js","assets/bootstrap-DUEfxN0n.css","assets/pinia-Bcdi2Ysd.js","assets/vue-i18n-BHMqRhkF.js","assets/@intlify-Y34EtYYP.js","assets/@unhead-7sNLY-vF.js","assets/unhead-BGJM7rvn.js","assets/hookable-B8xFkYCm.js","assets/vue-router-B7fjlXBC.js","assets/vue-toastification-DzSy0R10.js","assets/register-service-worker-TYP_X6yW.js","assets/DefineForestView-ChNSHR3_.css","assets/ImprintView-B3eyb55_.js","assets/ImprintView-D08j89TI.css"],__vite__mapDeps=i=>i.map(i=>__vite__fileDeps[i]);
import"./bootstrap-De39DNDK.js";import{_ as A,I as b,J as C,S as i,U as g,V as l,a0 as w,a1 as k,R as _,Q as m,E as d,P as B,M as z,F as L,k as R,a2 as x,a3 as G,$ as q}from"./@vue-9tgEZASq.js";import{d as E,c as V}from"./pinia-Bcdi2Ysd.js";import{c as W}from"./vue-i18n-BHMqRhkF.js";import{c as J,V as K}from"./@unhead-7sNLY-vF.js";import{R as j,c as U,a as Z}from"./vue-router-B7fjlXBC.js";import{u as Q}from"./vue-toastification-DzSy0R10.js";import{b as X,e as H,i as Y}from"./vue-gtag-CUNIFPiK.js";import{F as M,l as f,f as ee,a as te,b as oe,c as se,d as ne,e as re}from"./@fortawesome-uLFEI7sP.js";import{r as ae}from"./register-service-worker-TYP_X6yW.js";import"./@popperjs-WhmJkuoZ.js";import"./@intlify-Y34EtYYP.js";import"./unhead-BGJM7rvn.js";import"./hookable-B8xFkYCm.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const r of n)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function o(n){const r={};return n.integrity&&(r.integrity=n.integrity),n.referrerPolicy&&(r.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?r.credentials="include":n.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(n){if(n.ep)return;n.ep=!0;const r=o(n);fetch(n.href,r)}})();const ie={en:{meta:{title:"Forest Shuffle Scoring App",keywords:"forest shuffle, forest, shuffle, board game, game, card, scoring, app, alpine",description:"Score your Forest Shuffle board game in under 90 seconds this simple user-friendly app."},cookies:{intro:'This site uses Cookies - for more information on this check our data privacy policy. Click on "Accept all", to accept all cookies or fine tune your cookie settings by clicking here',settings:"Cookie settings",acceptAll:"Accept all",acceptSelection:"Accept selection",technical:"Store relevant data to run this site",tracking:"Store data for anonymous analytics of user interactions with this website",social:"Store data for social media integrations on this website",consentRequired:"Please consent to cookies first"},forestShuffle:"Forest Shuffle",scoringApp:"Scoring App",letsGo:"Let's go",imprint:"Imprint",dataProtection:"Data Security",points:"Points",player:"Player",treeTypeCount:"Amounts of tree types",startNewGame:"Start new game",resetPlayers:"Reset players",alpineExpansion:"Alpine Expansion","error.nameTaken":"The name {0} is already taken.",trees:"Trees",tops:"Tops",bottoms:"Bottoms",sides:"Sides",birds:"Birds",butterflies:"Butterflies",others:"Others",plants:"Plants",mushrooms:"Mushrooms",amphibians:"Amphibians",insects:"Insects",pawedAnimals:"Pawed Animals",bats:"Bats",deer:"Deer",clovenHoofedAnimal:"Cloven-Hoofed Animal",deerAndCloven:"Deer and cloven-Hoofed Animals",alps:"Alps",silverFirCount:"Silver Fir symbols",lindenCount:"Linden symbols",horseChestnutCount:"Horse Chestnut symbols",birchCount:"Birch symbols",beechCount:"Beech symbols",sycamoreCount:"Sycamore symbols",douglasFirCount:"Douglas Fir symbols",oakCount:"Oak symbols",europeanLarchCount:"European Larch symbols",stonePineCount:"Stone Pine symbols",beech:"Beech",birch:"Birch",douglasFir:"Douglas Fir",horseChestnut:"Horse Chestnut",linden:"Linden",oak:"Oak",silverFir:"Silver Fir",cardsAttachedToSilverFirs:"cards attached",sycamore:"Sycamore",treeSaplings:"Tree Saplings",bullfinch:"Bullfinch",chaffinch:"Chaffinch",chaffinchesAtopABeech:"atop a beech",eurasianJay:"Eurasian Jay",goshawk:"Goshawk",greatSpottedWoodpecker:"Great Spotted Woodpecker",tawnyOwl:"Tawny Owl",camberwellBeauty:"Camberwell Beauty",peacockButterfly:"Peacock Butterfly",silverWashedFritillary:"Silver-Washed Fritillary",purpleEmperor:"Purple Emperor",largeTortoiseshell:"Large Tortoiseshell",redSquirrel:"Red Squirrel",redSquirrelsAtopAnOak:"atop an oak",blackberries:"Blackberries",chanterelle:"Chanterelle",flyagaric:"Fly Agaric",moss:"Moss",parasolMushroom:"Parasol Mushroom",pennyBun:"Penny Bun",treeFerns:"Tree Ferns",wildStrawberries:"Wild Strawberries",commonToad:"Common Toad",sharingACardSlot:"sharing a card slot",pondTurtle:"Pond Turtle",treeFrog:"Tree Frog",fireSalamander:"Fire Salamander",fireflies:"Fireflies",woodAnt:"Wood Ant",hedgehog:"Hedgehog",mole:"Mole",stagBeetle:"Stag Beetle",violetCarpenterBee:"Violet Carpenter Bee",onABeech:"on a beech",onAHorseChestnut:"on a horse chestnut",onALinden:"on a linden",gnat:"Gnat",barbastelleBat:"Barbastelle Bat",bechsteinsBat:"Bechstein's Bat",brownLongEaredBat:"Brown Long-Eared Bat",greaterHorseshoeBat:"Greater Horseshoe Bat",fallowDeer:"Fallow Deer",redDeer:"Red Deer",roeDeerBeech:"Roe Deer",roeDeerBirch:"Roe Deer",roeDeerHorseChestnut:"Roe Deer",roeDeerLinden:"Roe Deer",roeDeerSilverFir:"Roe Deer",squeaker:"Squeaker",wildBoar:"Wild Boar",beechMarten:"Beech Marten",fullyOccupiedTrees:"fully occupied trees",brownBear:"Brown Bear",europeanBadger:"European Badger",europeanFatDormouse:"European Fat Dormouse",batOnTheOtherSide:"with bat on the opposite",europeanHare:"European Hare",lynx:"Lynx",raccoon:"Raccoon",redFox:"Red Fox",wolf:"Wolf",cave:"Cave",cardsInCave:"Cards in cave",europeanLarch:"European Larch",stonePine:"Stone Pine",alpineMarmot:"Alpine Marmot",chamois:"Chamois",capercaillie:"Capercaillie",mountainHare:"Mountain Hare",steinbock:"Steinbock",savisPipistrelle:"Savi's Pipistrelle",phoebusApollo:"Phoebus Apollo",blackTrumpet:"Black Trumpet",edelweiss:"Edelweiss",blueberry:"Blueberry",alpineNewt:"Alpine Newt",goldenEagle:"Golden Eagle",beardedVulture:"Bearded Vulture",gentian:"Gentian",commonRaven:"Common Raven"},de:{meta:{title:"Mischwald Wertungs-App - Forest Shuffle Scoring App",keywords:"mischwald, brettspiel, spiel, wertung, scoring, punkte, alpin, erweiterung",description:"Ermittle die Punkte Deiner Mischwald Auslage in weniger als 90 Sekunden mit dieser nutzerfreundlichen App."},cookies:{intro:'Diese Website verwendet Cookies - nähere Information dazu und zu Deinen Rechten als Benutzer findest Du in unserer Datenschutzerklärung. Klicke auf "Alle annehmen", um Cookies zu akzeptieren und direkt unsere Website benutzen zu können, oder verwalte Deine Cookies indem Du hier klickst',settings:"Cookie Einstellungen",acceptAll:"Alle annehmen",acceptSelection:"Auswahl bestätigen",technical:"Für Speicherung von für die   Funktion der Website essentiellen Daten",tracking:"Für die anonymisierte Analyse des Nutzerverhalten notwendige Daten speichern",social:"Social Media auf der Website ermöglichen",consentRequired:"Please consent to cookies first"},forestShuffle:"Mischwald",scoringApp:"Wertungs-App",imprint:"Impressum",dataProtection:"Datenschutz",letsGo:"Los geht's",points:"Punkte",player:"Spieler",treeTypeCount:"Anzahl Baumtypen-Symbole",startNewGame:"Neues Spiel starten",resetPlayers:"Spieler zurücksetzen",alpineExpansion:"Alpin Erweiterung","error.nameTaken":"Der Name {0} ist bereits vergeben.",trees:"Bäume",tops:"Oben",bottoms:"Unten",sides:"Seiten",birds:"Vögel",butterflies:"Schmetterlinge",others:"Weitere",plants:"Pflanzen",mushrooms:"Pilze",amphibians:"Amphibien",insects:"Insekten",pawedAnimals:"Pfotentiere",bats:"Fledermäuse",deer:"Hirsch",clovenHoofedAnimal:"Paarhufer",alps:"Alpen",silverFirCount:"Tannen-Symbole",lindenCount:"Linden-Symbole",horseChestnutCount:"Kastanien-Symbole",birchCount:"Birken-Symbole",beechCount:"Buchen-Symbole",sycamoreCount:"Ahorn-Symbole",douglasFirCount:"Douglasien-Symbole",oakCount:"Eichen-Symbole",europeanLarchCount:"Europäische Lärchen-Symbole",stonePineCount:"Zirbelkiefer-Symbole",beech:"Buche",birch:"Birke",douglasFir:"Douglasie",horseChestnut:"Kastanie",linden:"Linde",oak:"Eiche",silverFir:"Tanne",cardsAttachedToSilverFirs:"Karten, die an Tannen liegen",sycamore:"Ahorn",treeSaplings:"Sprössling",bullfinch:"Gimpel",chaffinch:"Buchfink",chaffinchesAtopABeech:"auf einer Buche",eurasianJay:"Eichelhäher,",goshawk:"Habicht",greatSpottedWoodpecker:"Buntspecht",tawnyOwl:"Waldkauz",camberwellBeauty:"Trauermantel",peacockButterfly:"Tagpfauenauge",silverWashedFritillary:"Kaisermantel",purpleEmperor:"Schillerfalter",largeTortoiseshell:"Großer Fuchs",redSquirrel:"Eichhörnchen",redSquirrelsAtopAnOak:"auf einer Eiche",blackberries:"Brombeeren",chanterelle:"Pfifferling",flyagaric:"Fliegenpilz",moss:"Moos",parasolMushroom:"Parasol",pennyBun:"Steinpilz",treeFerns:"Baumfarn",wildStrawberries:"Walderdbeeren",commonToad:"Erdkröte",sharingACardSlot:"teilen sich den Platz",pondTurtle:"Sumpfschildkröte",treeFrog:"Laubfrosch",fireSalamander:"Feuersalamander",fireflies:"Glühwürmchen",woodAnt:"Waldameise",hedgehog:"Igel",mole:"Maulwurf",stagBeetle:"Hirschkäfer",violetCarpenterBee:"Holzbiene",onABeech:"auf einer Buche",onAHorseChestnut:"auf einer Kastanie",onALinden:"auf einer Linde",gnat:"Stechmücke",barbastelleBat:"Mops-Fledermaus",bechsteinsBat:"Bechstein-Fledermaus",brownLongEaredBat:"Braunes Langohr",greaterHorseshoeBat:"Hufeisennase",fallowDeer:"Damhirsch",redDeer:"Rothirsch",roeDeerBeech:"Reh",roeDeerBirch:"Reh",roeDeerHorseChestnut:"Reh",roeDeerLinden:"Reh",roeDeerSilverFir:"Reh",squeaker:"Frischling",deerAndCloven:"Rotwild und Huftiere",wildBoar:"Wildschwein",beechMarten:"Steinmarder",fullyOccupiedTrees:"voll besetzte Bäume",brownBear:"Braunbär",europeanBadger:"Dachs",europeanFatDormouse:"Siebenschläfer",batOnTheOtherSide:"mit Fledermaus gegenüber",europeanHare:"Feldhase",lynx:"Luchs",raccoon:"Waschbär",redFox:"Fuchs",wolf:"Wolf",cave:"Höhle",cardsInCave:"Karten in der Höhle",europeanLarch:"Europäische Lärche",stonePine:"Zirbelkiefer",alpineMarmot:"Alpenmurmeltier",chamois:"Gämse",capercaillie:"Auerhuhn",mountainHare:"Berghase",steinbock:"Steinbock",savisPipistrelle:"Alpenfledermaus",phoebusApollo:"Alpen-Apollofalter",blackTrumpet:"Herbsttrompete",edelweiss:"Edelweiß",blueberry:"Heidelbeere",alpineNewt:"Bergmolch",goldenEagle:"Steinadler",beardedVulture:"Bartgeier",gentian:"Enzian",commonRaven:"Kolkrabe"},fr:{meta:{title:"Forêt Mixte - Application de score",keywords:"Forêt Mixte, forêt, jeu de société, jeu, carte, score, application, alps",description:"Scorez votre jeu de société Forest Shuffle en moins de 90 secondes avec cette application simple et conviviale."},cookies:{intro:`Ce site utilise des cookies - pour plus d'informations, consultez notre politique de confidentialité des données. Cliquez sur "Accepter tout", pour accepter tous les cookies ou ajustez vos paramètres de cookies en cliquant ici`,settings:"Paramètres des cookies",acceptAll:"Tout accepter",acceptSelection:"Accepter la sélection",technical:"Stocker les données pertinentes pour faire fonctionner ce site",tracking:"Stocker les données pour l'analyse anonyme des interactions des utilisateurs avec ce site",social:"Stocker les données pour les intégrations de médias sociaux sur ce site",consentRequired:"Veuillez d'abord consentir aux cookies"},forestShuffle:"Forêt Mixte",scoringApp:"Application de Score",letsGo:"Allons-y",imprint:"Empreinte",dataProtection:"Sécurité des Données",points:"Points",player:"Joueur",treeTypeCount:"Nombre de types d'arbres",startNewGame:"Commencer une nouvelle partie",resetPlayers:"Réinitialiser les joueurs",alpineExpansion:"Extension Alps","error.nameTaken":"Le nom {0} est déjà pris.",trees:"Arbres",tops:"Hauts",bottoms:"Bas",sides:"Côtés",birds:"Oiseaux",butterflies:"Papillons",others:"Autres",plants:"Plantes",mushrooms:"Champignons",amphibians:"Amphibiens",insects:"Insectes",pawedAnimals:"Plantigrades / digitigrades",bats:"Chauves-souris",deer:"Cerfs",clovenHoofedAnimal:"Animal à sabots fendus",deerAndCloven:"Cerfs et animaux à sabots fendus",alps:"Alpien",silverFirCount:"Symboles de sapin argenté",lindenCount:"Symboles de tilleul",horseChestnutCount:"Symboles de marronnier",birchCount:"Symboles de bouleau",beechCount:"Symboles de hêtre",sycamoreCount:"Symboles de sycomore",douglasFirCount:"Symboles de sapin de Douglas",oakCount:"Symboles de chêne",europeanLarchCount:"Symboles de mélèze européen",stonePineCount:"Symboles de pin cembro",beech:"Hêtre",birch:"Bouleau",douglasFir:"Sapin de Douglas",horseChestnut:"Marronnier d'Inde",linden:"Tilleul",oak:"Chêne",silverFir:"Sapin argenté",cardsAttachedToSilverFirs:"cartes attachées",sycamore:"Sycomore",treeSaplings:"Jeunes pousses d'arbres",bullfinch:"Bouvreuil",chaffinch:"Pinson des arbres",chaffinchesAtopABeech:"au sommet d'un hêtre",eurasianJay:"Geai des chênes",goshawk:"Autour des palombes",greatSpottedWoodpecker:"Pic épeiche",tawnyOwl:"Chouette hulotte",camberwellBeauty:"Grand Admiral",peacockButterfly:"Paon du jour",silverWashedFritillary:"Tabac d'Espagne",purpleEmperor:"Grand Mars changeant",largeTortoiseshell:"Grande Tortue",redSquirrel:"Écureuil roux",redSquirrelsAtopAnOak:"au sommet d'un chêne",blackberries:"Mûres",chanterelle:"Girolle",flyagaric:"Amanite tue-mouches",moss:"Mousse",parasolMushroom:"Coulemelle",pennyBun:"Cèpe de Bordeaux",treeFerns:"Fougères arborescentes",wildStrawberries:"Fraises des bois",commonToad:"Crapaud commun",sharingACardSlot:"partageant un emplacement de carte",pondTurtle:"Cistude d'Europe",treeFrog:"Rainette",fireSalamander:"Salamandre tachetée",fireflies:"Luciole",woodAnt:"Fourmi rousse",hedgehog:"Hérisson",mole:"Taupe",stagBeetle:"Lucane cerf-volant",violetCarpenterBee:"Abeille charpentière violette",onABeech:"sur un hêtre",onAHorseChestnut:"sur un marronnier d'Inde",onALinden:"sur un tilleul",gnat:"Moucheron",barbastelleBat:"Barbastelle",bechsteinsBat:"Chauve-souris de Bechstein",brownLongEaredBat:"Oreillard brun",greaterHorseshoeBat:"Grand rhinolophe",fallowDeer:"Daim",redDeer:"Cerf élaphe",roeDeerBeech:"Chevreuil",roeDeerBirch:"Chevreuil",roeDeerHorseChestnut:"Chevreuil",roeDeerLinden:"Chevreuil",roeDeerSilverFir:"Chevreuil",squeaker:"Crécelle",wildBoar:"Sanglier",beechMarten:"Fouine",fullyOccupiedTrees:"arbres entièrement occupés",brownBear:"Ours brun",europeanBadger:"Blaireau européen",europeanFatDormouse:"Loir",batOnTheOtherSide:"avec une chauve-souris de l'autre côté",europeanHare:"Lièvre européen",lynx:"Lynx",raccoon:"Raton laveur",redFox:"Renard roux",wolf:"Loup",cave:"Grotte",cardsInCave:"Cartes dans la grotte",europeanLarch:"Mélèze européen",stonePine:"Pin cembro",alpineMarmot:"Marmotte des Alpes",chamois:"Chamois",capercaillie:"Grand tétras",mountainHare:"Lièvre variable",steinbock:"Bouquetin",savisPipistrelle:"Pipistrelle de Savi",phoebusApollo:"Apollon",blackTrumpet:"Trompette de la mort",edelweiss:"Edelweiss",blueberry:"Myrtille",alpineNewt:"Triton alpestre",goldenEagle:"Aigle royal",beardedVulture:"Gypaète barbu",gentian:"Gentiane",commonRaven:"Grand corbeau"},it:{meta:{title:"Forest Shuffle - App Punteggio",keywords:"forest shuffle, punti, shuffle, gioco da tavolo, gioco, carta, punteggio, app, alpino",description:"Segna il tuo gioco da tavolo Forest Shuffle in meno di 90 secondi con questa app semplice e facile da usare."},cookies:{intro:"Questo sito utilizza i cookie - per maggiori informazioni al riguardo, consultare la nostra informativa sulla privacy. Fare clic su 'Accetta tutti' per accettare tutti i cookie o regolare le impostazioni dei cookie facendo clic qui.",settings:"Impostazioni Cookie",acceptAll:"Accetta Tutto",acceptSelection:"Accetta la selezione",technical:"Salva i dati rilevanti per la gestione del sito",tracking:"Salva i dati per l'analisi anonima delle interazioni degli utenti con questo sito web",social:"Salva i dati per le integrazioni dei social media su questo sito web",consentRequired:"Accetta i Cookie prima di tutto"},forestShuffle:"Forest Shuffle",scoringApp:"App Punteggio",letsGo:"Iniziamo!",imprint:"Imprint",dataProtection:"Sicurezza dei dati",points:"Punti",player:"Giocatore",treeTypeCount:"Amounts of tree types",startNewGame:"Nuova Partita",resetPlayers:"Resetta i giocatori",alpineExpansion:"Espansione Alpine","error.nameTaken":"Il nome {0} è già stato usato.",trees:"Alberi",tops:"In Alto",bottoms:"In Basso",sides:"Laterali",birds:"Uccelli",butterflies:"Farballe",others:"Altro",plants:"Piante",mushrooms:"Funghi",amphibians:"Anfibi",insects:"Insetti",pawedAnimals:"Animali con Zampe",bats:"Pipistrelli",deer:"Cervi",clovenHoofedAnimal:"Animali con Zoccoli",deerAndCloven:"Cervo e Animali con Zoccoli",alps:"Alpi",silverFirCount:"Icone Abete Bianco",lindenCount:"Icone Tiglio",horseChestnutCount:"Icone Ippocastano",birchCount:"Icone Betulla",beechCount:"Icone Faggio",sycamoreCount:"Icone Acero",douglasFirCount:"Icone Abete di Douglas",oakCount:"Icone Quercia",europeanLarchCount:"Icone Larice Comune",stonePineCount:"Icone Pino Cembro",beech:"Faggio",birch:"Betulla",douglasFir:"Abete di Douglas",horseChestnut:"Ippocastano",linden:"Tiglio",oak:"Quercia",silverFir:"Abete Bianco",cardsAttachedToSilverFirs:"carte collocate su Abeti Bianchi",sycamore:"Acero",treeSaplings:"Arboscelli",bullfinch:"Ciuffolotto",chaffinch:"Fringuello",chaffinchesAtopABeech:"sopra un Faggio",eurasianJay:"Ghiandaia",goshawk:"Falco Pellegrino",greatSpottedWoodpecker:"Picchio Rosso Maggiore",tawnyOwl:"Barbagianni",camberwellBeauty:"Vanessa Antiopa",peacockButterfly:"Vanessa Io",silverWashedFritillary:"Pafia",purpleEmperor:"Iride",largeTortoiseshell:"Vanessa Multicolore",redSquirrel:"Scoiattolo",redSquirrelsAtopAnOak:"su una Quercia",blackberries:"Mora",chanterelle:"Finferlo",flyagaric:"Amanita Muscaria",moss:"Muschio",parasolMushroom:"Mazza di Tamburo",pennyBun:"Porcino",treeFerns:"Felce Arborea",wildStrawberries:"Fragola di Bosco",commonToad:"Rospo",sharingACardSlot:"che condividono lo stesso slot",pondTurtle:"Tartaruga Palustre",treeFrog:"Raganella",fireSalamander:"Salamandra Pezzata",fireflies:"Lucciola",woodAnt:"Formica Rossa",hedgehog:"Riccio",mole:"Talpa",stagBeetle:"Cervo Volante",violetCarpenterBee:"Ape Legnaiola",onABeech:"su un Faggio",onAHorseChestnut:"su un Ippocastano",onALinden:"su un Tiglio",gnat:"Zanzara",barbastelleBat:"Barbastello",bechsteinsBat:"Vespertilio di Bechstein",brownLongEaredBat:"Orecchione Bruno",greaterHorseshoeBat:"Ferro di Cavallo Maggiore",fallowDeer:"Daino",redDeer:"Cervo Reale",roeDeerBeech:"Capriolo",roeDeerBirch:"Capriolo",roeDeerHorseChestnut:"Capriolo",roeDeerLinden:"Capriolo",roeDeerSilverFir:"Capriolo",squeaker:"Cinghialetto",wildBoar:"Cinghiale",beechMarten:"Faina",fullyOccupiedTrees:"alberi completamente occupati",brownBear:"Orso Bruno",europeanBadger:"Tasso",europeanFatDormouse:"Ghiro",batOnTheOtherSide:"con un pipistrello sullo stesso albero",europeanHare:"Lepre",lynx:"Lince",raccoon:"Procione",redFox:"Volpe",wolf:"Lupo",cave:"Caverna",cardsInCave:"Carte nella caverna",europeanLarch:"Larice Comune",stonePine:"Pino Cembro",alpineMarmot:"Marmotta delle Alpi",chamois:"Camoscio Alpino",capercaillie:"Gallo Cedrone",mountainHare:"Lepre Alpina",steinbock:"Stambecco delle Alpi",savisPipistrelle:"Pipistrello di Savi",phoebusApollo:"Farfalla Febo",blackTrumpet:"Trombetta dei Morti",edelweiss:"Stella Alpina",blueberry:"Mirtillo Nero",alpineNewt:"Tritone Alpino",goldenEagle:"Aquila Reale",beardedVulture:"Gipeto",gentian:"Genziana",commonRaven:"Corvo Imperiale"}};function le(e={}){const o={...{countryCodeOnly:!1},...e},s=navigator.languages!==void 0?navigator.languages[0]:navigator.language;return s?o.countryCodeOnly?s.trim().split(/-|_/)[0]:s.trim():void 0}const N=W({locale:le({countryCodeOnly:!0}),fallbackLocale:"en",messages:ie}),ce=N.global,ue=Q();function pe(e){ue(e,{type:"danger"})}const y=(e,t)=>{const o=e.__vccOpts||e;for(const[s,n]of t)o[s]=n;return o},me={errorCaptured(e,t,o){return console.error(e),pe(e.message),!1}};function de(e,t,o,s,n,r){return A(e.$slots,"default")}const he=y(me,[["render",de]]),be={name:"CookieConsent",data(){return{customizing:!1,consent:{given:!1,customizing:!1,technical:!0,tracking:!1,social:!1}}},methods:{consentGiven(){this.consent.given=!0,localStorage.setItem("cookieConsent",JSON.stringify(this.consent)),this.consent.technical&&X().then(()=>{console.log("Google Analytics tracking turned on.")})},acceptAll(){this.consent.technical=!0,this.consent.tracking=!0,this.consent.social=!0,this.consentGiven()}},mounted(){let e=localStorage.getItem("cookieConsent");e&&(this.consent=JSON.parse(e),this.consentGiven())}},fe={key:0,class:"overlay small"},ye={class:"cookie-consent shadow rounded"},ge={class:"d-flex justify-content-around"},Ce={class:"flex-grow-1"},ve={class:"text-nowrap"},Be={class:"custom-control custom-switch"},Se=i("input",{type:"checkbox",class:"custom-control-input",id:"customSwitch1",value:"true",disabled:"",checked:""},null,-1),Ae={class:"custom-control-label",for:"customSwitch1"},Pe={class:"custom-control custom-switch"},we={class:"custom-control-label",for:"customSwitch2"},ke={class:"custom-control custom-switch"},Fe={class:"custom-control-label",for:"customSwitch3"},De={class:"mt-2"};function Te(e,t,o,s,n,r){return n.consent.given?_("",!0):(b(),C("div",fe,[i("div",ye,[n.customizing?A(e.$slots,"customize",{key:1},()=>[i("div",Be,[Se,i("label",Ae,l(e.$t("cookies.technical")),1)]),i("div",Pe,[w(i("input",{type:"checkbox",class:"custom-control-input",id:"customSwitch2","onUpdate:modelValue":t[2]||(t[2]=a=>e.tracking=a)},null,512),[[k,e.tracking]]),i("label",we,l(e.$t("cookies.tracking")),1)]),i("div",ke,[w(i("input",{type:"checkbox",class:"custom-control-input",id:"customSwitch3","onUpdate:modelValue":t[3]||(t[3]=a=>e.social=a)},null,512),[[k,e.social]]),i("label",Fe,l(e.$t("cookies.tracking")),1)]),i("div",De,[i("button",{class:"btn btn-sm btn-primary mr-1",onClick:t[4]||(t[4]=(...a)=>r.consentGiven&&r.consentGiven(...a))},l(e.$t("cookies.acceptSelection")),1),i("button",{class:"btn btn-sm btn-primary",onClick:t[5]||(t[5]=(...a)=>r.acceptAll&&r.acceptAll(...a))},l(e.$t("cookies.acceptAll")),1)])]):A(e.$slots,"banner",{key:0},()=>[i("div",ge,[i("div",Ce,[g(l(e.$t("cookies.intro"))+": ",1),i("span",{class:"link btn-link",onClick:t[0]||(t[0]=a=>n.customizing=!0)},l(e.$t("cookies.settings")),1),g(". ")]),i("div",ve,[i("button",{class:"btn btn-primary",onClick:t[1]||(t[1]=(...a)=>r.acceptAll&&r.acceptAll(...a))},l(e.$t("cookies.acceptAll")),1)])])])])]))}const _e=y(be,[["render",Te]]),Le={name:"Footer"},Ee={class:"footer position-fixed text-center w-100"},He={class:"text-primary"};function Me(e,t,o,s,n,r){const a=m("router-link");return b(),C("div",Ee,[i("div",He,[d(a,{to:{name:"imprint"},class:"text-primary"},{default:B(()=>[g(l(e.$t("imprint")),1)]),_:1}),g(" | "),d(a,{class:"text-primary",to:{name:"imprint"}},{default:B(()=>[g(l(e.$t("dataProtection")),1)]),_:1})])])}const Ne=y(Le,[["render",Me],["__scopeId","data-v-deaa9e49"]]),Oe="1.0.17",Ie={name:"Version",data(){return{version:Oe}},mounted(){H("version",{version:this.version})}},$e={class:"version text-info"};function ze(e,t,o,s,n,r){return b(),C("div",$e,l(n.version),1)}const Re=y(Ie,[["render",ze],["__scopeId","data-v-6c8e0dee"]]),xe={head(){return{title:this.$t("meta.title"),meta:[{name:"description",content:this.$t("meta.description")},{name:"keywords",content:this.$t("meta.keywords")}]}},components:{RouterView:j,ErrorCapture:he,CookieConsent:_e,Footer:Ne,Version:Re},data(){return{currentMode:"production"}},mounted(){console.log("running in mode "+this.currentMode),console.log("base url is https://glaures.github.io/forestshuffle/")}},Ge={class:"mb-5"};function qe(e,t,o,s,n,r){const a=m("RouterView"),c=m("ErrorCapture"),h=m("Footer"),S=m("CookieConsent"),u=m("Version");return b(),C(L,null,[d(c,null,{default:B(()=>[i("div",Ge,[d(a)])]),_:1}),e.$route.name==="home"?(b(),z(h,{key:0})):_("",!0),d(S),d(u)],64)}const Ve=y(xe,[["render",qe]]),We="modulepreload",Je=function(e){return"/forestshuffle/"+e},F={},D=function(t,o,s){let n=Promise.resolve();if(o&&o.length>0){document.getElementsByTagName("link");const r=document.querySelector("meta[property=csp-nonce]"),a=(r==null?void 0:r.nonce)||(r==null?void 0:r.getAttribute("nonce"));n=Promise.all(o.map(c=>{if(c=Je(c),c in F)return;F[c]=!0;const h=c.endsWith(".css"),S=h?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${c}"]${S}`))return;const u=document.createElement("link");if(u.rel=h?"stylesheet":We,h||(u.as="script",u.crossOrigin=""),u.href=c,a&&u.setAttribute("nonce",a),document.head.appendChild(u),h)return new Promise((I,$)=>{u.addEventListener("load",I),u.addEventListener("error",()=>$(new Error(`Unable to preload CSS for ${c}`)))})}))}return n.then(()=>t()).catch(r=>{const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=r,window.dispatchEvent(a),!a.defaultPrevented)throw r})},T=E("game",{state(){return{players:[],currentPlayer:null,alpineExpansion:!0}},actions:{addPlayer(e){if(this.players.find(t=>t.name===e))throw new Error(ce.t("error.nameTaken",[e]));this.players.push({name:e})},selectPlayer(e){this.currentPlayer=this.players.find(t=>t.name===e)},resetPlayers(){this.players=[],this.currentPlayer=null},toggleAlpineExpansion(){this.alpineExpansion=!this.alpineExpansion}}}),Ke={name:"beech",type:"beech",symbols:["tree"],recalculatePoints(e){const t=this.count,s=e.cards.find(n=>n.name==="violetCarpenterBee").params[0].value;t+s>=4?this.points=t*5:this.points=0}},je={name:"birch",type:"birch",symbols:["tree"],recalculatePoints(e){this.points=this.count}},Ue={name:"douglasFir",type:"douglasFir",symbols:["tree"],recalculatePoints(e){this.points=this.count*5}},Ze={name:"horseChestnut",type:"horseChestnut",symbols:["tree"],recalculatePoints(e){let t=Math.min(this.count,7);const o=e.cards.find(s=>s.name==="violetCarpenterBee");t+=o.params[1].value,this.points=t*t}},Qe={name:"linden",type:"linden",symbols:["tree"],recalculatePoints(e){this.points=this.count*(e.hasMostOfName("linden")?3:1)}},Xe={name:"oak",type:"oak",symbols:["tree"],recalculatePoints(e){e.cards.filter(o=>o.symbols.indexOf("tree")>=0&&o.name!=="treeSaplings"&&o.count>0).length===8?this.points=this.count*10:this.points=0}},Ye={name:"silverFir",type:"silverFir",symbols:["tree"],params:[{name:"cardsAttachedToSilverFirs",type:"number",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.params[0].value*2}},et={name:"sycamore",type:"sycamore",symbols:["tree"],recalculatePoints(e){this.points=e.countByName("sycamore")*e.countBySymbol("tree")}},tt={name:"treeSaplings",type:"none",symbols:["tree"],recalculatePoints(e){}},ot={name:"europeanLarch",type:"alpineLarch",symbols:["tree","alps"],recalculatePoints(e){this.points=this.count*3}},st={name:"stonePine",type:"stonePine",symbols:["tree","alps"],recalculatePoints(e){this.points=this.count*e.countBySymbol("alps")}},nt=[Ke,je,Ue,Ze,Qe,Xe,Ye,et,tt,ot,st],rt={name:"bullfinch",position:"top",symbols:["bird"],recalculatePoints(e){this.points=this.count*e.countBySymbol("insect")*2}},at={name:"chaffinch",position:"top",symbols:["bird"],params:[{name:"chaffinchesAtopABeech",type:"number",value:0}],recalculatePoints(e){this.points=this.params[0].value*5}},it={name:"eurasianJay",position:"top",symbols:["bird"],recalculatePoints(e){this.points=this.count*3}},lt={name:"goshawk",position:"top",symbols:["bird"],recalculatePoints(e){this.points=this.count*e.countBySymbol("bird")*3}},ct={name:"greatSpottedWoodpecker",position:"top",symbols:["bird"],recalculatePoints(e){this.points=e.hasMostOfSymbol("tree")?this.count*10:0}},ut={name:"tawnyOwl",position:"top",symbols:["bird"],recalculatePoints(e){this.points=this.count*5}},pt={name:"capercaillie",position:"top",symbols:["bird","alps"],recalculatePoints(e){this.points=this.count*e.countBySymbol("plant")}},mt={name:"goldenEagle",position:"top",symbols:["bird","alps"],recalculatePoints(e){this.points=this.count*(e.countBySymbol("pawedAnimal")+e.countBySymbol("amphibian"))}},dt={name:"beardedVulture",position:"top",symbols:["bird","alps"],recalculatePoints(e){this.points=this.count*e.caveCount}},ht={name:"commonRaven",position:"top",symbols:["bird","alps"],recalculatePoints(e){this.points=this.count*5}},bt=[rt,at,it,lt,ct,ut,pt,mt,dt,ht],ft=[0,0,3,6,12,20,35];function yt(e){let t=e.cards.filter(s=>s.symbols.indexOf("butterfly")>=0&&s.count>0).map(s=>s.count),o=0;for(;t.length>0;)o+=ft[t.length],t=t.map(s=>s-1).filter(s=>s>0);return o}const gt={name:"camberwellBeauty",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},Ct={name:"peacockButterfly",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},vt={name:"silverWashedFritillary",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},Bt={name:"purpleEmperor",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},St={name:"largeTortoiseshell",position:"top",symbols:["butterfly","insect"],recalculatePoints(e){}},At={name:"phoebusApollo",position:"top",symbols:["butterfly","insect","alps"],recalculatePoints(e){}},Pt=[gt,Ct,vt,Bt,St,At],wt={name:"redSquirrel",position:"top",symbols:["pawedAnimal"],params:[{name:"redSquirrelsAtopAnOak",type:"number",value:0}],recalculatePoints(e){this.points=this.params[0].value*5}},kt=[wt],Ft={name:"blackberries",position:"bottom",symbols:["plant"],recalculatePoints(e){this.points=this.count*e.countBySymbol("plant")*2}},Dt={name:"moss",position:"bottom",symbols:["plant"],recalculatePoints(e){e.countBySymbol("tree")>=10?this.points=this.count*10:this.points=0}},Tt={name:"treeFerns",position:"bottom",symbols:["plant"],recalculatePoints(e){this.points=this.count*e.countBySymbol("amphibian")*6}},_t={name:"wildStrawberries",position:"bottom",symbols:["plant"],recalculatePoints(e){e.cards.filter(o=>o.symbols.indexOf("tree")>=0&&o.name!=="treeSaplings"&&o.count>0).length>=8?this.points=this.count*10:this.points=0}},Lt={name:"edelweiss",position:"bottom",symbols:["plant","alps"],recalculatePoints(e){this.points=this.count*3}},Et={name:"blueberry",position:"bottom",symbols:["plant","alps"],recalculatePoints(e){this.points=this.count*2*e.countDistinctBySymbol("bird")}},Ht={name:"gentian",position:"bottom",symbols:["plant","alps"],recalculatePoints(e){this.points=this.count*3*e.countBySymbol("butterfly")}},Mt=[Ft,Tt,_t,Dt,Lt,Et,Ht],Nt={name:"chanterelle",position:"bottom",symbols:["mushroom"],recalculatePoints(e){}},Ot={name:"flyagaric",position:"bottom",symbols:["mushroom"],recalculatePoints(e){}},It={name:"parasolMushroom",position:"bottom",symbols:["mushroom"],recalculatePoints(e){}},$t={name:"pennyBun",position:"bottom",symbols:["mushroom"],recalculatePoints(e){}},zt={name:"blackTrumpet",position:"bottom",symbols:["mushroom","alps"],recalculatePoints(e){}},Rt=[Nt,Ot,It,$t,zt],xt={name:"commonToad",position:"bottom",symbols:["amphibian"],params:[{name:"sharingACardSlot",type:"number",value:0}],recalculatePoints(e){this.points=this.params[0].value*5}},Gt={name:"pondTurtle",position:"bottom",symbols:["amphibian"],recalculatePoints(e){this.points=this.count*5}},qt={name:"treeFrog",position:"bottom",symbols:["amphibian"],recalculatePoints(e){this.points=this.count*e.countByName("gnat")*5}},Vt={name:"fireSalamander",position:"bottom",symbols:["amphibian"],recalculatePoints(e){this.points=[0,5,15,25][Math.min(3,this.count)]}},Wt={name:"alpineNewt",position:"bottom",symbols:["amphibian","alps"],recalculatePoints(e){this.points=this.count*2*e.countBySymbol("insect")}},Jt=[xt,Gt,qt,Vt,Wt],Kt={name:"gnat",position:"side",symbols:["insect"],recalculatePoints(e){this.points=e.countByName("gnat")*e.countBySymbol("bat")}},jt={name:"fireflies",position:"bottom",symbols:["insect"],recalculatePoints(e){this.points=[0,0,10,15,20][Math.min(4,this.count)]}},Ut={name:"woodAnt",position:"bottom",symbols:["insect"],recalculatePoints(e){this.points=this.count*e.countByPosition("bottom")*2}},Zt={name:"stagBeetle",position:"bottom",symbols:["insect"],recalculatePoints(e){this.points=this.count*e.countBySymbol("pawedAnimal")}},Qt={name:"violetCarpenterBee",position:"side",symbols:["insect"],params:[{name:"onABeech",type:"number",value:0},{name:"onAHorseChestnut",type:"number",value:0},{name:"onALinden",type:"number",value:0}],recalculatePoints(e){}},Xt=[Kt,jt,Ut,Zt,Qt],Yt={name:"hedgehog",position:"bottom",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*e.countBySymbol("butterfly")*2}},eo={name:"mole",position:"bottom",symbols:["pawedAnimal"],recalculatePoints(e){}},to={name:"beechMarten",position:"side",symbols:["pawedAnimal"],params:[{name:"fullyOccupiedTrees",type:"number",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*5*this.params[0].value}},oo={name:"brownBear",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){}},so={name:"europeanBadger",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*2}},no={name:"europeanFatDormouse",position:"side",symbols:["pawedAnimal"],params:[{name:"batOnTheOtherSide",type:"number",value:0}],recalculatePoints(e){this.points=this.params[0].value*15}},P=e=>e.countByName("europeanHare")+e.countByName("mountainHare"),ro={name:"europeanHare",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*P(e)}},ao={name:"lynx",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){e.countByName("roeDeerBeech")+e.countByName("roeDeerBirch")+e.countByName("roeDeerHorseChestnut")+e.countByName("roeDeerLinden")+e.countByName("roeDeerSilverFir")>0?this.points=this.count*10:this.points=0}},io={name:"raccoon",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){}},lo={name:"redFox",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*P(e)*2}},co={name:"wolf",position:"side",symbols:["pawedAnimal"],recalculatePoints(e){this.points=this.count*5*e.countBySymbol("deer")}},uo={name:"alpineMarmot",position:"side",symbols:["pawedAnimal","alps"],recalculatePoints(e){this.points=this.count*3*e.countDistinctBySymbol("plant")}},po={name:"mountainHare",position:"side",symbols:["pawedAnimal","alps"],recalculatePoints(e){this.points=this.count*P(e)}},mo=[Yt,eo,to,oo,so,no,ro,ao,io,lo,co,uo,po],v=(e,t)=>e.countDistinctBySymbol("bat")>=3?e.countByName(t)*5:0,ho={name:"barbastelleBat",position:"side",symbols:["bat"],recalculatePoints(e){this.points=v(e,this.name)}},bo={name:"bechsteinsBat",position:"side",symbols:["bat"],recalculatePoints(e){this.points=v(e,this.name)}},fo={name:"brownLongEaredBat",position:"side",symbols:["bat"],recalculatePoints(e){this.points=v(e,this.name)}},yo={name:"greaterHorseshoeBat",position:"side",symbols:["bat"],recalculatePoints(e){this.points=v(e,this.name)}},go={name:"savisPipistrelle",position:"side",symbols:["bat","alps"],recalculatePoints(e){this.points=v(e,this.name)}},Co=[ho,bo,fo,yo,go],vo={name:"fallowDeer",position:"side",symbols:["deer","clovenHoofedAnimal"],recalculatePoints(e){this.points=e.countByName("fallowDeer")*3*e.countBySymbol("clovenHoofedAnimal")}},Bo={name:"redDeer",position:"side",symbols:["deer","clovenHoofedAnimal"],recalculatePoints(e){this.points=e.countByName("redDeer")*(e.countBySymbol("plant")+e.countBySymbol("tree"))}},So={name:"roeDeerBeech",type:"beech",position:"side",symbols:["deer","clovenHoofedAnimal"],params:[{name:"beechCount",type:"type",symbol:"beech",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*e.beechCount*3}},Ao={name:"roeDeerBirch",type:"birch",position:"side",symbols:["deer","clovenHoofedAnimal"],params:[{name:"birchCount",type:"type",symbol:"birch",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*e.birchCount*3}},Po={name:"roeDeerHorseChestnut",type:"horseChestnut",position:"side",symbols:["deer","clovenHoofedAnimal"],params:[{name:"horseChestnutCount",type:"type",symbol:"horseChestnut",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*e.horseChestnutCount*3}},wo={name:"roeDeerLinden",type:"linden",position:"side",symbols:["deer","clovenHoofedAnimal"],params:[{name:"lindenCount",type:"type",symbol:"linden",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*e.lindenCount*3}},ko={name:"roeDeerSilverFir",type:"silverFir",position:"side",symbols:["deer","clovenHoofedAnimal"],params:[{name:"silverFirCount",type:"type",symbol:"silverFir",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*e.silverFirCount*3}},Fo={name:"squeaker",position:"side",symbols:["clovenHoofedAnimal"],recalculatePoints(e){this.points=this.count}},Do={name:"wildBoar",position:"side",symbols:["clovenHoofedAnimal"],recalculatePoints(e){e.countByName("squeaker")>0?this.points=this.count*10:this.points=0}},To={name:"chamois",position:"side",symbols:["clovenHoofedAnimal","alps"],params:[{name:"stonePineCount",type:"type",symbol:"stonePine",value:0,unrestricted:!0}],recalculatePoints(e){this.points=this.count*e.stonePineCount*3}},_o={name:"steinbock",position:"side",symbols:["clovenHoofedAnimal","alps"],recalculatePoints(e){this.points=this.count*10}},Lo=[vo,Bo,So,wo,ko,Po,Ao,Fo,Do,To,_o],Eo=[...nt,...bt,...Pt,...kt,...Mt,...Rt,...Jt,...Xt,...mo,...Co,...Lo];class Ho{constructor(t,o){this.playerName=t,this.allForests=o,this.reset()}reset(){this.butterflyPoints=0,this.silverFirCount=0,this.lindenCount=0,this.horseChestnutCount=0,this.birchCount=0,this.beechCount=0,this.sycamoreCount=0,this.douglasFirCount=0,this.oakCount=0,this.europeanLarchCount=0,this.stonePineCount=0,this.caveCount=0,this.points=0,this.cards=[];for(let t of Eo){const o={...t};t.params&&(o.params=t.params.map(s=>({...s}))),this.cards.push({...o,count:0,points:0})}}getSymbolCount(t){return this[t+"Count"]}setSymbolCount(t,o){this[t+"Count"]=o,this.updatePoints()}findCard(t){return this.cards[this.cards.findIndex(o=>o.name===t)]}addCard(t){++this.findCard(t).count}removeCard(t){const o=this.findCard(t);o.count=Math.max(0,--o.count),o.count===0&&o.params&&o.params.forEach(s=>s.value=0)}addParam(t,o){const s=this.findCard(t),n=s.params.find(r=>r.name===o);n.value=Math.min(n.unrestricted?99:s.count,n.value+1)}subParam(t,o){const n=this.findCard(t).params.find(r=>r.name===o);n.value=Math.max(0,n.value-1)}updatePoints(){let t=0;for(let o of this.cards.filter(s=>s.count>0))o.recalculatePoints(this),t+=o.points;this.butterflyPoints=yt(this),this.points=t+this.butterflyPoints+this.caveCount}countByName(t){let o=this.cards.find(s=>s.name===t).count;return t==="linden"&&(o+=this.cards.find(s=>s.name==="violetCarpenterBee").params[2].value),o}countBySymbol(t){let o=this.cards.filter(s=>s.symbols.filter(n=>n===t).length>0).reduce((s,n)=>s+=n.count,0);if(t==="tree"){const s=this.cards.find(n=>n.name==="violetCarpenterBee");for(let n of s.params)o+=n.value}return o}countByPosition(t){return this.cards.filter(o=>o.position===t).reduce((o,s)=>o+=s.count,0)}countDistinctBySymbol(t){return this.cards.filter(o=>o.symbols.filter(s=>s===t).length>0).filter(o=>o.count>0).length}hasMostOfName(t){const o=this.countByName(t);let s=!0;const n=this.allForests.filter(r=>r.playerName!==this.playerName);for(let r of n)r.countByName(t)>o&&(s=!1);return s}hasMostOfSymbol(t){let o=this.countBySymbol(t),s=!0;const n=this.allForests.filter(r=>r.playerName!==this.playerName);for(let r of n)r.countBySymbol(t)>o&&(s=!1);return s}roeDeerPresent(){return this.countByName("roeDeerBeech")+this.countByName("roeDeerBirch")+this.countByName("roeDeerHorseChestnut")+this.countByName("roeDeerLinden")+this.countByName("roeDeerSilverFir")>0}}const Mo=E("forests",{state:()=>({forests:[]}),getters:{getForestByPlayerName:e=>t=>e.forests.find(o=>o.playerName===t)},actions:{addForest(e){const t=R(new Ho(e,this.forests));return this.forests.push(t),this.updatePointsInAllForests(),t},addCard(e,t){this.getForestByPlayerName(e).addCard(t),this.updatePointsInAllForests()},removeCard(e,t){this.getForestByPlayerName(e).removeCard(t),this.updatePointsInAllForests()},addParam(e,t,o){this.getForestByPlayerName(e).addParam(t,o),this.updatePointsInAllForests()},subParam(e,t,o){this.getForestByPlayerName(e).subParam(t,o),this.updatePointsInAllForests()},setSymbolCount(e,t,o){this.getForestByPlayerName(e).setSymbolCount(t,o),this.updatePointsInAllForests()},addSymbolCount(e,t){const o=this.getForestByPlayerName(e);o.setSymbolCount(t,o.getSymbolCount(t)+1),this.updatePointsInAllForests()},subSymbolCount(e,t){const o=this.getForestByPlayerName(e);o.setSymbolCount(t,Math.max(0,o.getSymbolCount(t)-1)),this.updatePointsInAllForests()},setCaveCount(e,t){this.getForestByPlayerName(e).caveCount=t,this.updatePointsInAllForests()},updatePointsInAllForests(){for(let e of this.forests)e.updatePoints()},reset(){this.forests.forEach(e=>e.reset())}}}),No="/forestshuffle/img/splash.png",Oo={name:"HomeView",components:{FontAwesomeIcon:M},data(){return{newPlayerName:""}},computed:{players(){return T().players}},methods:{addPlayer(){T().addPlayer(this.newPlayerName),Mo().addForest(this.newPlayerName),this.newPlayerName=""}},mounted(){H("initialLanguage",{lang:this.$i18n.locale})}},Io=e=>(x("data-v-814605c5"),e=e(),G(),e),$o=Io(()=>i("div",{class:"splash col-12 col-md-6 offset-md-3"},[i("img",{src:No,class:"w-100",alt:"splash"})],-1)),zo={class:"container text-center"},Ro={class:"mt-5 fs-1 fw-bold"},xo={class:"fs-5"},Go={class:"mt-3 btn btn-primary btn-sm"};function qo(e,t,o,s,n,r){const a=m("router-link");return b(),C(L,null,[$o,i("div",zo,[i("h1",Ro,l(e.$t("forestShuffle")),1),i("h2",xo,l(e.$t("scoringApp")),1),d(a,{to:{name:"defineForest"}},{default:B(()=>[i("button",Go,l(e.$t("letsGo")),1)]),_:1})])],64)}const Vo=y(Oo,[["render",qo],["__scopeId","data-v-814605c5"]]),O=U({history:Z("/forestshuffle/"),routes:[{path:"/",name:"home",component:Vo},{path:"/define-forest",name:"defineForest",props:!0,component:()=>D(()=>import("./DefineForestView-B999k_d7.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))},{path:"/imprint",name:"imprint",props:!0,component:()=>D(()=>import("./ImprintView-B3eyb55_.js"),__vite__mapDeps([17,1,2,4,5,6,7,8,9,10,11,12,13,14,3,15,18]))}]});O.beforeEach((e,t,o)=>{const s=e.query.redirect;s?o(s):o()});ae("https://glaures.github.io/forestshuffle/service-worker.js",{ready(){console.log(`App is being served from cache by a service worker.
For more details, visit https://goo.gl/AFskqB`)},registered(){console.log("Service worker has been registered.")},cached(){console.log("Content has been cached for offline use.")},updatefound(){console.log("New content is downloading.")},updated(){console.log("New content is available; please refresh."),caches.keys().then(function(e){for(let t of e)caches.delete(t)})},offline(){console.log("No internet connection found. App is running in offline mode.")},error(e){console.error("Error during service worker registration:",e)}});f.add(ee);f.add(te);f.add(oe);f.add(se);f.add(ne);f.add(re);const p=q(Ve);p.use(N);const Wo=J();p.use(Wo);p.mixin(K);p.use(V());p.use(O);p.use(Y,{config:{id:"G-KFWTPR47EN"}});p.component("font-awesome-icon",M);p.mount("#app");export{Ho as F,y as _,T as a,Mo as u};
